
test3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041cc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004354  08004354  00014354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004384  08004384  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004384  08004384  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004384  08004384  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004384  08004384  00014384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004388  08004388  00014388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800438c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000464  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000474  20000474  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012b20  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002426  00000000  00000000  00032b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010b8  00000000  00000000  00034f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fe8  00000000  00000000  00036040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dade  00000000  00000000  00037028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014164  00000000  00000000  00054b06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b4f8f  00000000  00000000  00068c6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011dbf9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000047b8  00000000  00000000  0011dc4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800433c 	.word	0x0800433c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	0800433c 	.word	0x0800433c

080001c8 <buzzerInit>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
TIM_HandleTypeDef *buzzerPwmTimer;
uint32_t buzzerPwmChannel;

void buzzerInit() {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
    buzzerPwmTimer = &htim2;
 80001cc:	4b07      	ldr	r3, [pc, #28]	; (80001ec <buzzerInit+0x24>)
 80001ce:	4a08      	ldr	r2, [pc, #32]	; (80001f0 <buzzerInit+0x28>)
 80001d0:	601a      	str	r2, [r3, #0]
    buzzerPwmChannel = TIM_CHANNEL_1;
 80001d2:	4b08      	ldr	r3, [pc, #32]	; (80001f4 <buzzerInit+0x2c>)
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Start(buzzerPwmTimer, buzzerPwmChannel);
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <buzzerInit+0x24>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a05      	ldr	r2, [pc, #20]	; (80001f4 <buzzerInit+0x2c>)
 80001de:	6812      	ldr	r2, [r2, #0]
 80001e0:	4611      	mov	r1, r2
 80001e2:	4618      	mov	r0, r3
 80001e4:	f002 ff58 	bl	8003098 <HAL_TIM_PWM_Start>
}
 80001e8:	bf00      	nop
 80001ea:	bd80      	pop	{r7, pc}
 80001ec:	20000468 	.word	0x20000468
 80001f0:	200000e4 	.word	0x200000e4
 80001f4:	2000046c 	.word	0x2000046c

080001f8 <buzzerChangeTone>:

void buzzerChangeTone(uint16_t freq, uint16_t volume) {
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b088      	sub	sp, #32
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	4603      	mov	r3, r0
 8000200:	460a      	mov	r2, r1
 8000202:	80fb      	strh	r3, [r7, #6]
 8000204:	4613      	mov	r3, r2
 8000206:	80bb      	strh	r3, [r7, #4]
    if (freq == 0 || freq > 20000) {
 8000208:	88fb      	ldrh	r3, [r7, #6]
 800020a:	2b00      	cmp	r3, #0
 800020c:	d004      	beq.n	8000218 <buzzerChangeTone+0x20>
 800020e:	88fb      	ldrh	r3, [r7, #6]
 8000210:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000214:	4293      	cmp	r3, r2
 8000216:	d937      	bls.n	8000288 <buzzerChangeTone+0x90>
        __HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, 0);
 8000218:	4b52      	ldr	r3, [pc, #328]	; (8000364 <buzzerChangeTone+0x16c>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d105      	bne.n	800022c <buzzerChangeTone+0x34>
 8000220:	4b51      	ldr	r3, [pc, #324]	; (8000368 <buzzerChangeTone+0x170>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2200      	movs	r2, #0
 8000228:	635a      	str	r2, [r3, #52]	; 0x34
 800022a:	e096      	b.n	800035a <buzzerChangeTone+0x162>
 800022c:	4b4d      	ldr	r3, [pc, #308]	; (8000364 <buzzerChangeTone+0x16c>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	2b04      	cmp	r3, #4
 8000232:	d105      	bne.n	8000240 <buzzerChangeTone+0x48>
 8000234:	4b4c      	ldr	r3, [pc, #304]	; (8000368 <buzzerChangeTone+0x170>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	681a      	ldr	r2, [r3, #0]
 800023a:	2300      	movs	r3, #0
 800023c:	6393      	str	r3, [r2, #56]	; 0x38
 800023e:	e08c      	b.n	800035a <buzzerChangeTone+0x162>
 8000240:	4b48      	ldr	r3, [pc, #288]	; (8000364 <buzzerChangeTone+0x16c>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	2b08      	cmp	r3, #8
 8000246:	d105      	bne.n	8000254 <buzzerChangeTone+0x5c>
 8000248:	4b47      	ldr	r3, [pc, #284]	; (8000368 <buzzerChangeTone+0x170>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	681a      	ldr	r2, [r3, #0]
 800024e:	2300      	movs	r3, #0
 8000250:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000252:	e082      	b.n	800035a <buzzerChangeTone+0x162>
 8000254:	4b43      	ldr	r3, [pc, #268]	; (8000364 <buzzerChangeTone+0x16c>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	2b0c      	cmp	r3, #12
 800025a:	d105      	bne.n	8000268 <buzzerChangeTone+0x70>
 800025c:	4b42      	ldr	r3, [pc, #264]	; (8000368 <buzzerChangeTone+0x170>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	681a      	ldr	r2, [r3, #0]
 8000262:	2300      	movs	r3, #0
 8000264:	6413      	str	r3, [r2, #64]	; 0x40
 8000266:	e078      	b.n	800035a <buzzerChangeTone+0x162>
 8000268:	4b3e      	ldr	r3, [pc, #248]	; (8000364 <buzzerChangeTone+0x16c>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	2b10      	cmp	r3, #16
 800026e:	d105      	bne.n	800027c <buzzerChangeTone+0x84>
 8000270:	4b3d      	ldr	r3, [pc, #244]	; (8000368 <buzzerChangeTone+0x170>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	681a      	ldr	r2, [r3, #0]
 8000276:	2300      	movs	r3, #0
 8000278:	6593      	str	r3, [r2, #88]	; 0x58
 800027a:	e06e      	b.n	800035a <buzzerChangeTone+0x162>
 800027c:	4b3a      	ldr	r3, [pc, #232]	; (8000368 <buzzerChangeTone+0x170>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	681a      	ldr	r2, [r3, #0]
 8000282:	2300      	movs	r3, #0
 8000284:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000286:	e068      	b.n	800035a <buzzerChangeTone+0x162>
    } else {
        const uint32_t internalClockFreq = HAL_RCC_GetSysClockFreq();
 8000288:	f002 fb88 	bl	800299c <HAL_RCC_GetSysClockFreq>
 800028c:	61f8      	str	r0, [r7, #28]
        const uint32_t prescaler = 1 + internalClockFreq / freq / 60000;
 800028e:	88fb      	ldrh	r3, [r7, #6]
 8000290:	69fa      	ldr	r2, [r7, #28]
 8000292:	fbb2 f3f3 	udiv	r3, r2, r3
 8000296:	4a35      	ldr	r2, [pc, #212]	; (800036c <buzzerChangeTone+0x174>)
 8000298:	fba2 2303 	umull	r2, r3, r2, r3
 800029c:	0b9b      	lsrs	r3, r3, #14
 800029e:	3301      	adds	r3, #1
 80002a0:	61bb      	str	r3, [r7, #24]
        const uint32_t timerClock = internalClockFreq / prescaler;
 80002a2:	69fa      	ldr	r2, [r7, #28]
 80002a4:	69bb      	ldr	r3, [r7, #24]
 80002a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80002aa:	617b      	str	r3, [r7, #20]
        const uint32_t periodCycles = timerClock / freq;
 80002ac:	88fb      	ldrh	r3, [r7, #6]
 80002ae:	697a      	ldr	r2, [r7, #20]
 80002b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80002b4:	613b      	str	r3, [r7, #16]
        const uint32_t pulseWidth = volume * periodCycles / 1000 / 2;
 80002b6:	88bb      	ldrh	r3, [r7, #4]
 80002b8:	693a      	ldr	r2, [r7, #16]
 80002ba:	fb02 f303 	mul.w	r3, r2, r3
 80002be:	4a2c      	ldr	r2, [pc, #176]	; (8000370 <buzzerChangeTone+0x178>)
 80002c0:	fba2 2303 	umull	r2, r3, r2, r3
 80002c4:	09db      	lsrs	r3, r3, #7
 80002c6:	60fb      	str	r3, [r7, #12]

        buzzerPwmTimer->Instance->PSC = prescaler - 1;
 80002c8:	4b27      	ldr	r3, [pc, #156]	; (8000368 <buzzerChangeTone+0x170>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	69ba      	ldr	r2, [r7, #24]
 80002d0:	3a01      	subs	r2, #1
 80002d2:	629a      	str	r2, [r3, #40]	; 0x28
        buzzerPwmTimer->Instance->ARR = periodCycles - 1;
 80002d4:	4b24      	ldr	r3, [pc, #144]	; (8000368 <buzzerChangeTone+0x170>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	693a      	ldr	r2, [r7, #16]
 80002dc:	3a01      	subs	r2, #1
 80002de:	62da      	str	r2, [r3, #44]	; 0x2c
        buzzerPwmTimer->Instance->EGR = TIM_EGR_UG;
 80002e0:	4b21      	ldr	r3, [pc, #132]	; (8000368 <buzzerChangeTone+0x170>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	2201      	movs	r2, #1
 80002e8:	615a      	str	r2, [r3, #20]

        __HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, pulseWidth);
 80002ea:	4b1e      	ldr	r3, [pc, #120]	; (8000364 <buzzerChangeTone+0x16c>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d105      	bne.n	80002fe <buzzerChangeTone+0x106>
 80002f2:	4b1d      	ldr	r3, [pc, #116]	; (8000368 <buzzerChangeTone+0x170>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	68fa      	ldr	r2, [r7, #12]
 80002fa:	635a      	str	r2, [r3, #52]	; 0x34
    }
}
 80002fc:	e02d      	b.n	800035a <buzzerChangeTone+0x162>
        __HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, pulseWidth);
 80002fe:	4b19      	ldr	r3, [pc, #100]	; (8000364 <buzzerChangeTone+0x16c>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	2b04      	cmp	r3, #4
 8000304:	d105      	bne.n	8000312 <buzzerChangeTone+0x11a>
 8000306:	4b18      	ldr	r3, [pc, #96]	; (8000368 <buzzerChangeTone+0x170>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	681a      	ldr	r2, [r3, #0]
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000310:	e023      	b.n	800035a <buzzerChangeTone+0x162>
        __HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, pulseWidth);
 8000312:	4b14      	ldr	r3, [pc, #80]	; (8000364 <buzzerChangeTone+0x16c>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	2b08      	cmp	r3, #8
 8000318:	d105      	bne.n	8000326 <buzzerChangeTone+0x12e>
 800031a:	4b13      	ldr	r3, [pc, #76]	; (8000368 <buzzerChangeTone+0x170>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	681a      	ldr	r2, [r3, #0]
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000324:	e019      	b.n	800035a <buzzerChangeTone+0x162>
        __HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, pulseWidth);
 8000326:	4b0f      	ldr	r3, [pc, #60]	; (8000364 <buzzerChangeTone+0x16c>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	2b0c      	cmp	r3, #12
 800032c:	d105      	bne.n	800033a <buzzerChangeTone+0x142>
 800032e:	4b0e      	ldr	r3, [pc, #56]	; (8000368 <buzzerChangeTone+0x170>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	681a      	ldr	r2, [r3, #0]
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000338:	e00f      	b.n	800035a <buzzerChangeTone+0x162>
        __HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, pulseWidth);
 800033a:	4b0a      	ldr	r3, [pc, #40]	; (8000364 <buzzerChangeTone+0x16c>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	2b10      	cmp	r3, #16
 8000340:	d105      	bne.n	800034e <buzzerChangeTone+0x156>
 8000342:	4b09      	ldr	r3, [pc, #36]	; (8000368 <buzzerChangeTone+0x170>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	681a      	ldr	r2, [r3, #0]
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	6593      	str	r3, [r2, #88]	; 0x58
}
 800034c:	e005      	b.n	800035a <buzzerChangeTone+0x162>
        __HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, pulseWidth);
 800034e:	4b06      	ldr	r3, [pc, #24]	; (8000368 <buzzerChangeTone+0x170>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	681a      	ldr	r2, [r3, #0]
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000358:	e7ff      	b.n	800035a <buzzerChangeTone+0x162>
 800035a:	bf00      	nop
 800035c:	3720      	adds	r7, #32
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	2000046c 	.word	0x2000046c
 8000368:	20000468 	.word	0x20000468
 800036c:	45e7b273 	.word	0x45e7b273
 8000370:	10624dd3 	.word	0x10624dd3

08000374 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000378:	f000 fc54 	bl	8000c24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800037c:	f000 f814 	bl	80003a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000380:	f000 f9da 	bl	8000738 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000384:	f000 f872 	bl	800046c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000388:	f000 f8b0 	bl	80004ec <MX_SPI1_Init>
  MX_USB_PCD_Init();
 800038c:	f000 f9b2 	bl	80006f4 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 8000390:	f000 f8ea 	bl	8000568 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000394:	f000 f95e 	bl	8000654 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
buzzerInit();
 8000398:	f7ff ff16 	bl	80001c8 <buzzerInit>
buzzerChangeTone(500, 10);
 800039c:	210a      	movs	r1, #10
 800039e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003a2:	f7ff ff29 	bl	80001f8 <buzzerChangeTone>
//HAL_TIM_Base_Start_IT(&ht36.21im3);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003a6:	e7fe      	b.n	80003a6 <main+0x32>

080003a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b09e      	sub	sp, #120	; 0x78
 80003ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80003b2:	2228      	movs	r2, #40	; 0x28
 80003b4:	2100      	movs	r1, #0
 80003b6:	4618      	mov	r0, r3
 80003b8:	f003 ffb8 	bl	800432c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80003c0:	2200      	movs	r2, #0
 80003c2:	601a      	str	r2, [r3, #0]
 80003c4:	605a      	str	r2, [r3, #4]
 80003c6:	609a      	str	r2, [r3, #8]
 80003c8:	60da      	str	r2, [r3, #12]
 80003ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003cc:	463b      	mov	r3, r7
 80003ce:	223c      	movs	r2, #60	; 0x3c
 80003d0:	2100      	movs	r1, #0
 80003d2:	4618      	mov	r0, r3
 80003d4:	f003 ffaa 	bl	800432c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80003d8:	2303      	movs	r3, #3
 80003da:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80003dc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80003e0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003e2:	2300      	movs	r3, #0
 80003e4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003e6:	2301      	movs	r3, #1
 80003e8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003ea:	2310      	movs	r3, #16
 80003ec:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003ee:	2302      	movs	r3, #2
 80003f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003f6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80003f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80003fc:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000402:	4618      	mov	r0, r3
 8000404:	f001 f910 	bl	8001628 <HAL_RCC_OscConfig>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800040e:	f000 fa37 	bl	8000880 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000412:	230f      	movs	r3, #15
 8000414:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000416:	2302      	movs	r3, #2
 8000418:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800041a:	2300      	movs	r3, #0
 800041c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800041e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000422:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000424:	2300      	movs	r3, #0
 8000426:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000428:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800042c:	2101      	movs	r1, #1
 800042e:	4618      	mov	r0, r3
 8000430:	f002 f938 	bl	80026a4 <HAL_RCC_ClockConfig>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800043a:	f000 fa21 	bl	8000880 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 800043e:	4b0a      	ldr	r3, [pc, #40]	; (8000468 <SystemClock_Config+0xc0>)
 8000440:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000442:	2300      	movs	r3, #0
 8000444:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000446:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800044a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800044c:	463b      	mov	r3, r7
 800044e:	4618      	mov	r0, r3
 8000450:	f002 fb0e 	bl	8002a70 <HAL_RCCEx_PeriphCLKConfig>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800045a:	f000 fa11 	bl	8000880 <Error_Handler>
  }
}
 800045e:	bf00      	nop
 8000460:	3778      	adds	r7, #120	; 0x78
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	00020020 	.word	0x00020020

0800046c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000470:	4b1b      	ldr	r3, [pc, #108]	; (80004e0 <MX_I2C1_Init+0x74>)
 8000472:	4a1c      	ldr	r2, [pc, #112]	; (80004e4 <MX_I2C1_Init+0x78>)
 8000474:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000476:	4b1a      	ldr	r3, [pc, #104]	; (80004e0 <MX_I2C1_Init+0x74>)
 8000478:	4a1b      	ldr	r2, [pc, #108]	; (80004e8 <MX_I2C1_Init+0x7c>)
 800047a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800047c:	4b18      	ldr	r3, [pc, #96]	; (80004e0 <MX_I2C1_Init+0x74>)
 800047e:	2200      	movs	r2, #0
 8000480:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000482:	4b17      	ldr	r3, [pc, #92]	; (80004e0 <MX_I2C1_Init+0x74>)
 8000484:	2201      	movs	r2, #1
 8000486:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000488:	4b15      	ldr	r3, [pc, #84]	; (80004e0 <MX_I2C1_Init+0x74>)
 800048a:	2200      	movs	r2, #0
 800048c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800048e:	4b14      	ldr	r3, [pc, #80]	; (80004e0 <MX_I2C1_Init+0x74>)
 8000490:	2200      	movs	r2, #0
 8000492:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000494:	4b12      	ldr	r3, [pc, #72]	; (80004e0 <MX_I2C1_Init+0x74>)
 8000496:	2200      	movs	r2, #0
 8000498:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800049a:	4b11      	ldr	r3, [pc, #68]	; (80004e0 <MX_I2C1_Init+0x74>)
 800049c:	2200      	movs	r2, #0
 800049e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004a0:	4b0f      	ldr	r3, [pc, #60]	; (80004e0 <MX_I2C1_Init+0x74>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004a6:	480e      	ldr	r0, [pc, #56]	; (80004e0 <MX_I2C1_Init+0x74>)
 80004a8:	f000 fec6 	bl	8001238 <HAL_I2C_Init>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004b2:	f000 f9e5 	bl	8000880 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004b6:	2100      	movs	r1, #0
 80004b8:	4809      	ldr	r0, [pc, #36]	; (80004e0 <MX_I2C1_Init+0x74>)
 80004ba:	f000 ff4c 	bl	8001356 <HAL_I2CEx_ConfigAnalogFilter>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004c4:	f000 f9dc 	bl	8000880 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004c8:	2100      	movs	r1, #0
 80004ca:	4805      	ldr	r0, [pc, #20]	; (80004e0 <MX_I2C1_Init+0x74>)
 80004cc:	f000 ff8e 	bl	80013ec <HAL_I2CEx_ConfigDigitalFilter>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004d6:	f000 f9d3 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004da:	bf00      	nop
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	2000002c 	.word	0x2000002c
 80004e4:	40005400 	.word	0x40005400
 80004e8:	2000090e 	.word	0x2000090e

080004ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80004f0:	4b1b      	ldr	r3, [pc, #108]	; (8000560 <MX_SPI1_Init+0x74>)
 80004f2:	4a1c      	ldr	r2, [pc, #112]	; (8000564 <MX_SPI1_Init+0x78>)
 80004f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80004f6:	4b1a      	ldr	r3, [pc, #104]	; (8000560 <MX_SPI1_Init+0x74>)
 80004f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80004fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80004fe:	4b18      	ldr	r3, [pc, #96]	; (8000560 <MX_SPI1_Init+0x74>)
 8000500:	2200      	movs	r2, #0
 8000502:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000504:	4b16      	ldr	r3, [pc, #88]	; (8000560 <MX_SPI1_Init+0x74>)
 8000506:	f44f 7240 	mov.w	r2, #768	; 0x300
 800050a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800050c:	4b14      	ldr	r3, [pc, #80]	; (8000560 <MX_SPI1_Init+0x74>)
 800050e:	2200      	movs	r2, #0
 8000510:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000512:	4b13      	ldr	r3, [pc, #76]	; (8000560 <MX_SPI1_Init+0x74>)
 8000514:	2200      	movs	r2, #0
 8000516:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000518:	4b11      	ldr	r3, [pc, #68]	; (8000560 <MX_SPI1_Init+0x74>)
 800051a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800051e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000520:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <MX_SPI1_Init+0x74>)
 8000522:	2208      	movs	r2, #8
 8000524:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000526:	4b0e      	ldr	r3, [pc, #56]	; (8000560 <MX_SPI1_Init+0x74>)
 8000528:	2200      	movs	r2, #0
 800052a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800052c:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <MX_SPI1_Init+0x74>)
 800052e:	2200      	movs	r2, #0
 8000530:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000532:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <MX_SPI1_Init+0x74>)
 8000534:	2200      	movs	r2, #0
 8000536:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000538:	4b09      	ldr	r3, [pc, #36]	; (8000560 <MX_SPI1_Init+0x74>)
 800053a:	2207      	movs	r2, #7
 800053c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800053e:	4b08      	ldr	r3, [pc, #32]	; (8000560 <MX_SPI1_Init+0x74>)
 8000540:	2200      	movs	r2, #0
 8000542:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <MX_SPI1_Init+0x74>)
 8000546:	2208      	movs	r2, #8
 8000548:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800054a:	4805      	ldr	r0, [pc, #20]	; (8000560 <MX_SPI1_Init+0x74>)
 800054c:	f002 fc40 	bl	8002dd0 <HAL_SPI_Init>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000556:	f000 f993 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800055a:	bf00      	nop
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	20000080 	.word	0x20000080
 8000564:	40013000 	.word	0x40013000

08000568 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08e      	sub	sp, #56	; 0x38
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800056e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800057c:	f107 031c 	add.w	r3, r7, #28
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000588:	463b      	mov	r3, r7
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
 8000594:	611a      	str	r2, [r3, #16]
 8000596:	615a      	str	r2, [r3, #20]
 8000598:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800059a:	4b2d      	ldr	r3, [pc, #180]	; (8000650 <MX_TIM2_Init+0xe8>)
 800059c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005a0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80005a2:	4b2b      	ldr	r3, [pc, #172]	; (8000650 <MX_TIM2_Init+0xe8>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005a8:	4b29      	ldr	r3, [pc, #164]	; (8000650 <MX_TIM2_Init+0xe8>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80005ae:	4b28      	ldr	r3, [pc, #160]	; (8000650 <MX_TIM2_Init+0xe8>)
 80005b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80005b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005b6:	4b26      	ldr	r3, [pc, #152]	; (8000650 <MX_TIM2_Init+0xe8>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005bc:	4b24      	ldr	r3, [pc, #144]	; (8000650 <MX_TIM2_Init+0xe8>)
 80005be:	2200      	movs	r2, #0
 80005c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005c2:	4823      	ldr	r0, [pc, #140]	; (8000650 <MX_TIM2_Init+0xe8>)
 80005c4:	f002 fcaf 	bl	8002f26 <HAL_TIM_Base_Init>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80005ce:	f000 f957 	bl	8000880 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005dc:	4619      	mov	r1, r3
 80005de:	481c      	ldr	r0, [pc, #112]	; (8000650 <MX_TIM2_Init+0xe8>)
 80005e0:	f003 f88e 	bl	8003700 <HAL_TIM_ConfigClockSource>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80005ea:	f000 f949 	bl	8000880 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80005ee:	4818      	ldr	r0, [pc, #96]	; (8000650 <MX_TIM2_Init+0xe8>)
 80005f0:	f002 fcf0 	bl	8002fd4 <HAL_TIM_PWM_Init>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80005fa:	f000 f941 	bl	8000880 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005fe:	2300      	movs	r3, #0
 8000600:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000602:	2300      	movs	r3, #0
 8000604:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000606:	f107 031c 	add.w	r3, r7, #28
 800060a:	4619      	mov	r1, r3
 800060c:	4810      	ldr	r0, [pc, #64]	; (8000650 <MX_TIM2_Init+0xe8>)
 800060e:	f003 fd8f 	bl	8004130 <HAL_TIMEx_MasterConfigSynchronization>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000618:	f000 f932 	bl	8000880 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800061c:	2360      	movs	r3, #96	; 0x60
 800061e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000628:	2300      	movs	r3, #0
 800062a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800062c:	463b      	mov	r3, r7
 800062e:	2200      	movs	r2, #0
 8000630:	4619      	mov	r1, r3
 8000632:	4807      	ldr	r0, [pc, #28]	; (8000650 <MX_TIM2_Init+0xe8>)
 8000634:	f002 ff50 	bl	80034d8 <HAL_TIM_PWM_ConfigChannel>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800063e:	f000 f91f 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000642:	4803      	ldr	r0, [pc, #12]	; (8000650 <MX_TIM2_Init+0xe8>)
 8000644:	f000 fa04 	bl	8000a50 <HAL_TIM_MspPostInit>

}
 8000648:	bf00      	nop
 800064a:	3738      	adds	r7, #56	; 0x38
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	200000e4 	.word	0x200000e4

08000654 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b088      	sub	sp, #32
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800065a:	f107 0310 	add.w	r3, r7, #16
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000672:	4b1e      	ldr	r3, [pc, #120]	; (80006ec <MX_TIM3_Init+0x98>)
 8000674:	4a1e      	ldr	r2, [pc, #120]	; (80006f0 <MX_TIM3_Init+0x9c>)
 8000676:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47999;
 8000678:	4b1c      	ldr	r3, [pc, #112]	; (80006ec <MX_TIM3_Init+0x98>)
 800067a:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 800067e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000680:	4b1a      	ldr	r3, [pc, #104]	; (80006ec <MX_TIM3_Init+0x98>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000686:	4b19      	ldr	r3, [pc, #100]	; (80006ec <MX_TIM3_Init+0x98>)
 8000688:	f240 32e7 	movw	r2, #999	; 0x3e7
 800068c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800068e:	4b17      	ldr	r3, [pc, #92]	; (80006ec <MX_TIM3_Init+0x98>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000694:	4b15      	ldr	r3, [pc, #84]	; (80006ec <MX_TIM3_Init+0x98>)
 8000696:	2200      	movs	r2, #0
 8000698:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800069a:	4814      	ldr	r0, [pc, #80]	; (80006ec <MX_TIM3_Init+0x98>)
 800069c:	f002 fc43 	bl	8002f26 <HAL_TIM_Base_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80006a6:	f000 f8eb 	bl	8000880 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006b0:	f107 0310 	add.w	r3, r7, #16
 80006b4:	4619      	mov	r1, r3
 80006b6:	480d      	ldr	r0, [pc, #52]	; (80006ec <MX_TIM3_Init+0x98>)
 80006b8:	f003 f822 	bl	8003700 <HAL_TIM_ConfigClockSource>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80006c2:	f000 f8dd 	bl	8000880 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006c6:	2300      	movs	r3, #0
 80006c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	4619      	mov	r1, r3
 80006d2:	4806      	ldr	r0, [pc, #24]	; (80006ec <MX_TIM3_Init+0x98>)
 80006d4:	f003 fd2c 	bl	8004130 <HAL_TIMEx_MasterConfigSynchronization>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80006de:	f000 f8cf 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80006e2:	bf00      	nop
 80006e4:	3720      	adds	r7, #32
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000130 	.word	0x20000130
 80006f0:	40000400 	.word	0x40000400

080006f4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80006f8:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <MX_USB_PCD_Init+0x3c>)
 80006fa:	4a0e      	ldr	r2, [pc, #56]	; (8000734 <MX_USB_PCD_Init+0x40>)
 80006fc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80006fe:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <MX_USB_PCD_Init+0x3c>)
 8000700:	2208      	movs	r2, #8
 8000702:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000704:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <MX_USB_PCD_Init+0x3c>)
 8000706:	2202      	movs	r2, #2
 8000708:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800070a:	4b09      	ldr	r3, [pc, #36]	; (8000730 <MX_USB_PCD_Init+0x3c>)
 800070c:	2202      	movs	r2, #2
 800070e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000710:	4b07      	ldr	r3, [pc, #28]	; (8000730 <MX_USB_PCD_Init+0x3c>)
 8000712:	2200      	movs	r2, #0
 8000714:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <MX_USB_PCD_Init+0x3c>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800071c:	4804      	ldr	r0, [pc, #16]	; (8000730 <MX_USB_PCD_Init+0x3c>)
 800071e:	f000 feb1 	bl	8001484 <HAL_PCD_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000728:	f000 f8aa 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	2000017c 	.word	0x2000017c
 8000734:	40005c00 	.word	0x40005c00

08000738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08a      	sub	sp, #40	; 0x28
 800073c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073e:	f107 0314 	add.w	r3, r7, #20
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800074e:	4b37      	ldr	r3, [pc, #220]	; (800082c <MX_GPIO_Init+0xf4>)
 8000750:	695b      	ldr	r3, [r3, #20]
 8000752:	4a36      	ldr	r2, [pc, #216]	; (800082c <MX_GPIO_Init+0xf4>)
 8000754:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000758:	6153      	str	r3, [r2, #20]
 800075a:	4b34      	ldr	r3, [pc, #208]	; (800082c <MX_GPIO_Init+0xf4>)
 800075c:	695b      	ldr	r3, [r3, #20]
 800075e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000766:	4b31      	ldr	r3, [pc, #196]	; (800082c <MX_GPIO_Init+0xf4>)
 8000768:	695b      	ldr	r3, [r3, #20]
 800076a:	4a30      	ldr	r2, [pc, #192]	; (800082c <MX_GPIO_Init+0xf4>)
 800076c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000770:	6153      	str	r3, [r2, #20]
 8000772:	4b2e      	ldr	r3, [pc, #184]	; (800082c <MX_GPIO_Init+0xf4>)
 8000774:	695b      	ldr	r3, [r3, #20]
 8000776:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800077e:	4b2b      	ldr	r3, [pc, #172]	; (800082c <MX_GPIO_Init+0xf4>)
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	4a2a      	ldr	r2, [pc, #168]	; (800082c <MX_GPIO_Init+0xf4>)
 8000784:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000788:	6153      	str	r3, [r2, #20]
 800078a:	4b28      	ldr	r3, [pc, #160]	; (800082c <MX_GPIO_Init+0xf4>)
 800078c:	695b      	ldr	r3, [r3, #20]
 800078e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	4b25      	ldr	r3, [pc, #148]	; (800082c <MX_GPIO_Init+0xf4>)
 8000798:	695b      	ldr	r3, [r3, #20]
 800079a:	4a24      	ldr	r2, [pc, #144]	; (800082c <MX_GPIO_Init+0xf4>)
 800079c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007a0:	6153      	str	r3, [r2, #20]
 80007a2:	4b22      	ldr	r3, [pc, #136]	; (800082c <MX_GPIO_Init+0xf4>)
 80007a4:	695b      	ldr	r3, [r3, #20]
 80007a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ae:	4b1f      	ldr	r3, [pc, #124]	; (800082c <MX_GPIO_Init+0xf4>)
 80007b0:	695b      	ldr	r3, [r3, #20]
 80007b2:	4a1e      	ldr	r2, [pc, #120]	; (800082c <MX_GPIO_Init+0xf4>)
 80007b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007b8:	6153      	str	r3, [r2, #20]
 80007ba:	4b1c      	ldr	r3, [pc, #112]	; (800082c <MX_GPIO_Init+0xf4>)
 80007bc:	695b      	ldr	r3, [r3, #20]
 80007be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80007c6:	2200      	movs	r2, #0
 80007c8:	f64f 7108 	movw	r1, #65288	; 0xff08
 80007cc:	4818      	ldr	r0, [pc, #96]	; (8000830 <MX_GPIO_Init+0xf8>)
 80007ce:	f000 fd1b 	bl	8001208 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80007d2:	2337      	movs	r3, #55	; 0x37
 80007d4:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80007d6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80007da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	4619      	mov	r1, r3
 80007e6:	4812      	ldr	r0, [pc, #72]	; (8000830 <MX_GPIO_Init+0xf8>)
 80007e8:	f000 fb94 	bl	8000f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80007ec:	f64f 7308 	movw	r3, #65288	; 0xff08
 80007f0:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f2:	2301      	movs	r3, #1
 80007f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fa:	2300      	movs	r3, #0
 80007fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	4619      	mov	r1, r3
 8000804:	480a      	ldr	r0, [pc, #40]	; (8000830 <MX_GPIO_Init+0xf8>)
 8000806:	f000 fb85 	bl	8000f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800080a:	2301      	movs	r3, #1
 800080c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800080e:	2300      	movs	r3, #0
 8000810:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	4619      	mov	r1, r3
 800081c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000820:	f000 fb78 	bl	8000f14 <HAL_GPIO_Init>

}
 8000824:	bf00      	nop
 8000826:	3728      	adds	r7, #40	; 0x28
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40021000 	.word	0x40021000
 8000830:	48001000 	.word	0x48001000

08000834 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
	static int t = 1;
    if (htim->Instance == TIM3)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a0d      	ldr	r2, [pc, #52]	; (8000878 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d113      	bne.n	800086e <HAL_TIM_PeriodElapsedCallback+0x3a>
    {
    	if(t == 1){
 8000846:	4b0d      	ldr	r3, [pc, #52]	; (800087c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d108      	bne.n	8000860 <HAL_TIM_PeriodElapsedCallback+0x2c>
    		t = 0;
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
    		buzzerChangeTone(500, 10);
 8000854:	210a      	movs	r1, #10
 8000856:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800085a:	f7ff fccd 	bl	80001f8 <buzzerChangeTone>
    	else {
    		t = 1;
    		buzzerChangeTone(0, 0);
    	}
    }
}
 800085e:	e006      	b.n	800086e <HAL_TIM_PeriodElapsedCallback+0x3a>
    		t = 1;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000862:	2201      	movs	r2, #1
 8000864:	601a      	str	r2, [r3, #0]
    		buzzerChangeTone(0, 0);
 8000866:	2100      	movs	r1, #0
 8000868:	2000      	movs	r0, #0
 800086a:	f7ff fcc5 	bl	80001f8 <buzzerChangeTone>
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40000400 	.word	0x40000400
 800087c:	20000000 	.word	0x20000000

08000880 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000884:	b672      	cpsid	i
}
 8000886:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000888:	e7fe      	b.n	8000888 <Error_Handler+0x8>
	...

0800088c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000892:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <HAL_MspInit+0x44>)
 8000894:	699b      	ldr	r3, [r3, #24]
 8000896:	4a0e      	ldr	r2, [pc, #56]	; (80008d0 <HAL_MspInit+0x44>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6193      	str	r3, [r2, #24]
 800089e:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <HAL_MspInit+0x44>)
 80008a0:	699b      	ldr	r3, [r3, #24]
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <HAL_MspInit+0x44>)
 80008ac:	69db      	ldr	r3, [r3, #28]
 80008ae:	4a08      	ldr	r2, [pc, #32]	; (80008d0 <HAL_MspInit+0x44>)
 80008b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b4:	61d3      	str	r3, [r2, #28]
 80008b6:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <HAL_MspInit+0x44>)
 80008b8:	69db      	ldr	r3, [r3, #28]
 80008ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008c2:	2007      	movs	r0, #7
 80008c4:	f000 fae4 	bl	8000e90 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c8:	bf00      	nop
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40021000 	.word	0x40021000

080008d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08a      	sub	sp, #40	; 0x28
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a17      	ldr	r2, [pc, #92]	; (8000950 <HAL_I2C_MspInit+0x7c>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d127      	bne.n	8000946 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	4b17      	ldr	r3, [pc, #92]	; (8000954 <HAL_I2C_MspInit+0x80>)
 80008f8:	695b      	ldr	r3, [r3, #20]
 80008fa:	4a16      	ldr	r2, [pc, #88]	; (8000954 <HAL_I2C_MspInit+0x80>)
 80008fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000900:	6153      	str	r3, [r2, #20]
 8000902:	4b14      	ldr	r3, [pc, #80]	; (8000954 <HAL_I2C_MspInit+0x80>)
 8000904:	695b      	ldr	r3, [r3, #20]
 8000906:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800090e:	23c0      	movs	r3, #192	; 0xc0
 8000910:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000912:	2312      	movs	r3, #18
 8000914:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000916:	2301      	movs	r3, #1
 8000918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800091a:	2303      	movs	r3, #3
 800091c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800091e:	2304      	movs	r3, #4
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	4619      	mov	r1, r3
 8000928:	480b      	ldr	r0, [pc, #44]	; (8000958 <HAL_I2C_MspInit+0x84>)
 800092a:	f000 faf3 	bl	8000f14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <HAL_I2C_MspInit+0x80>)
 8000930:	69db      	ldr	r3, [r3, #28]
 8000932:	4a08      	ldr	r2, [pc, #32]	; (8000954 <HAL_I2C_MspInit+0x80>)
 8000934:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000938:	61d3      	str	r3, [r2, #28]
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <HAL_I2C_MspInit+0x80>)
 800093c:	69db      	ldr	r3, [r3, #28]
 800093e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000946:	bf00      	nop
 8000948:	3728      	adds	r7, #40	; 0x28
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40005400 	.word	0x40005400
 8000954:	40021000 	.word	0x40021000
 8000958:	48000400 	.word	0x48000400

0800095c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08a      	sub	sp, #40	; 0x28
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a17      	ldr	r2, [pc, #92]	; (80009d8 <HAL_SPI_MspInit+0x7c>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d128      	bne.n	80009d0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800097e:	4b17      	ldr	r3, [pc, #92]	; (80009dc <HAL_SPI_MspInit+0x80>)
 8000980:	699b      	ldr	r3, [r3, #24]
 8000982:	4a16      	ldr	r2, [pc, #88]	; (80009dc <HAL_SPI_MspInit+0x80>)
 8000984:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000988:	6193      	str	r3, [r2, #24]
 800098a:	4b14      	ldr	r3, [pc, #80]	; (80009dc <HAL_SPI_MspInit+0x80>)
 800098c:	699b      	ldr	r3, [r3, #24]
 800098e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000992:	613b      	str	r3, [r7, #16]
 8000994:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000996:	4b11      	ldr	r3, [pc, #68]	; (80009dc <HAL_SPI_MspInit+0x80>)
 8000998:	695b      	ldr	r3, [r3, #20]
 800099a:	4a10      	ldr	r2, [pc, #64]	; (80009dc <HAL_SPI_MspInit+0x80>)
 800099c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a0:	6153      	str	r3, [r2, #20]
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <HAL_SPI_MspInit+0x80>)
 80009a4:	695b      	ldr	r3, [r3, #20]
 80009a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80009ae:	23e0      	movs	r3, #224	; 0xe0
 80009b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b2:	2302      	movs	r3, #2
 80009b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ba:	2303      	movs	r3, #3
 80009bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009be:	2305      	movs	r3, #5
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	4619      	mov	r1, r3
 80009c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009cc:	f000 faa2 	bl	8000f14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80009d0:	bf00      	nop
 80009d2:	3728      	adds	r7, #40	; 0x28
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40013000 	.word	0x40013000
 80009dc:	40021000 	.word	0x40021000

080009e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009f0:	d10c      	bne.n	8000a0c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009f2:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <HAL_TIM_Base_MspInit+0x68>)
 80009f4:	69db      	ldr	r3, [r3, #28]
 80009f6:	4a14      	ldr	r2, [pc, #80]	; (8000a48 <HAL_TIM_Base_MspInit+0x68>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	61d3      	str	r3, [r2, #28]
 80009fe:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <HAL_TIM_Base_MspInit+0x68>)
 8000a00:	69db      	ldr	r3, [r3, #28]
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000a0a:	e018      	b.n	8000a3e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a0e      	ldr	r2, [pc, #56]	; (8000a4c <HAL_TIM_Base_MspInit+0x6c>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d113      	bne.n	8000a3e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a16:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <HAL_TIM_Base_MspInit+0x68>)
 8000a18:	69db      	ldr	r3, [r3, #28]
 8000a1a:	4a0b      	ldr	r2, [pc, #44]	; (8000a48 <HAL_TIM_Base_MspInit+0x68>)
 8000a1c:	f043 0302 	orr.w	r3, r3, #2
 8000a20:	61d3      	str	r3, [r2, #28]
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <HAL_TIM_Base_MspInit+0x68>)
 8000a24:	69db      	ldr	r3, [r3, #28]
 8000a26:	f003 0302 	and.w	r3, r3, #2
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2100      	movs	r1, #0
 8000a32:	201d      	movs	r0, #29
 8000a34:	f000 fa37 	bl	8000ea6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000a38:	201d      	movs	r0, #29
 8000a3a:	f000 fa50 	bl	8000ede <HAL_NVIC_EnableIRQ>
}
 8000a3e:	bf00      	nop
 8000a40:	3710      	adds	r7, #16
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	40000400 	.word	0x40000400

08000a50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b088      	sub	sp, #32
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 030c 	add.w	r3, r7, #12
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a70:	d11d      	bne.n	8000aae <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <HAL_TIM_MspPostInit+0x68>)
 8000a74:	695b      	ldr	r3, [r3, #20]
 8000a76:	4a10      	ldr	r2, [pc, #64]	; (8000ab8 <HAL_TIM_MspPostInit+0x68>)
 8000a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a7c:	6153      	str	r3, [r2, #20]
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <HAL_TIM_MspPostInit+0x68>)
 8000a80:	695b      	ldr	r3, [r3, #20]
 8000a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a8e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	2302      	movs	r3, #2
 8000a92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa0:	f107 030c 	add.w	r3, r7, #12
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aaa:	f000 fa33 	bl	8000f14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000aae:	bf00      	nop
 8000ab0:	3720      	adds	r7, #32
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40021000 	.word	0x40021000

08000abc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08a      	sub	sp, #40	; 0x28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a18      	ldr	r2, [pc, #96]	; (8000b3c <HAL_PCD_MspInit+0x80>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d129      	bne.n	8000b32 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <HAL_PCD_MspInit+0x84>)
 8000ae0:	695b      	ldr	r3, [r3, #20]
 8000ae2:	4a17      	ldr	r2, [pc, #92]	; (8000b40 <HAL_PCD_MspInit+0x84>)
 8000ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae8:	6153      	str	r3, [r2, #20]
 8000aea:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <HAL_PCD_MspInit+0x84>)
 8000aec:	695b      	ldr	r3, [r3, #20]
 8000aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000af6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000afa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afc:	2302      	movs	r3, #2
 8000afe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b04:	2303      	movs	r3, #3
 8000b06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000b08:	230e      	movs	r3, #14
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4619      	mov	r1, r3
 8000b12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b16:	f000 f9fd 	bl	8000f14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000b1a:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <HAL_PCD_MspInit+0x84>)
 8000b1c:	69db      	ldr	r3, [r3, #28]
 8000b1e:	4a08      	ldr	r2, [pc, #32]	; (8000b40 <HAL_PCD_MspInit+0x84>)
 8000b20:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b24:	61d3      	str	r3, [r2, #28]
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_PCD_MspInit+0x84>)
 8000b28:	69db      	ldr	r3, [r3, #28]
 8000b2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000b32:	bf00      	nop
 8000b34:	3728      	adds	r7, #40	; 0x28
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40005c00 	.word	0x40005c00
 8000b40:	40021000 	.word	0x40021000

08000b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <NMI_Handler+0x4>

08000b4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <HardFault_Handler+0x4>

08000b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <MemManage_Handler+0x4>

08000b56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <BusFault_Handler+0x4>

08000b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <UsageFault_Handler+0x4>

08000b62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b90:	f000 f88e 	bl	8000cb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000b9c:	4802      	ldr	r0, [pc, #8]	; (8000ba8 <TIM3_IRQHandler+0x10>)
 8000b9e:	f002 fb7b 	bl	8003298 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000130 	.word	0x20000130

08000bac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <SystemInit+0x20>)
 8000bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bb6:	4a05      	ldr	r2, [pc, #20]	; (8000bcc <SystemInit+0x20>)
 8000bb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c08 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bd4:	f7ff ffea 	bl	8000bac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bd8:	480c      	ldr	r0, [pc, #48]	; (8000c0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000bda:	490d      	ldr	r1, [pc, #52]	; (8000c10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bdc:	4a0d      	ldr	r2, [pc, #52]	; (8000c14 <LoopForever+0xe>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be0:	e002      	b.n	8000be8 <LoopCopyDataInit>

08000be2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000be2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be6:	3304      	adds	r3, #4

08000be8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bec:	d3f9      	bcc.n	8000be2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bee:	4a0a      	ldr	r2, [pc, #40]	; (8000c18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bf0:	4c0a      	ldr	r4, [pc, #40]	; (8000c1c <LoopForever+0x16>)
  movs r3, #0
 8000bf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf4:	e001      	b.n	8000bfa <LoopFillZerobss>

08000bf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf8:	3204      	adds	r2, #4

08000bfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bfc:	d3fb      	bcc.n	8000bf6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bfe:	f003 fb71 	bl	80042e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c02:	f7ff fbb7 	bl	8000374 <main>

08000c06 <LoopForever>:

LoopForever:
    b LoopForever
 8000c06:	e7fe      	b.n	8000c06 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c08:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000c0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c10:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c14:	0800438c 	.word	0x0800438c
  ldr r2, =_sbss
 8000c18:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c1c:	20000474 	.word	0x20000474

08000c20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c20:	e7fe      	b.n	8000c20 <ADC1_2_IRQHandler>
	...

08000c24 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c28:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <HAL_Init+0x28>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a07      	ldr	r2, [pc, #28]	; (8000c4c <HAL_Init+0x28>)
 8000c2e:	f043 0310 	orr.w	r3, r3, #16
 8000c32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c34:	2003      	movs	r0, #3
 8000c36:	f000 f92b 	bl	8000e90 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	f000 f808 	bl	8000c50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c40:	f7ff fe24 	bl	800088c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40022000 	.word	0x40022000

08000c50 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c58:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <HAL_InitTick+0x54>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <HAL_InitTick+0x58>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	4619      	mov	r1, r3
 8000c62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f000 f943 	bl	8000efa <HAL_SYSTICK_Config>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e00e      	b.n	8000c9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2b0f      	cmp	r3, #15
 8000c82:	d80a      	bhi.n	8000c9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c84:	2200      	movs	r2, #0
 8000c86:	6879      	ldr	r1, [r7, #4]
 8000c88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c8c:	f000 f90b 	bl	8000ea6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c90:	4a06      	ldr	r2, [pc, #24]	; (8000cac <HAL_InitTick+0x5c>)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c96:	2300      	movs	r3, #0
 8000c98:	e000      	b.n	8000c9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000004 	.word	0x20000004
 8000ca8:	2000000c 	.word	0x2000000c
 8000cac:	20000008 	.word	0x20000008

08000cb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <HAL_IncTick+0x20>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	461a      	mov	r2, r3
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_IncTick+0x24>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	4a04      	ldr	r2, [pc, #16]	; (8000cd4 <HAL_IncTick+0x24>)
 8000cc2:	6013      	str	r3, [r2, #0]
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	2000000c 	.word	0x2000000c
 8000cd4:	20000470 	.word	0x20000470

08000cd8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  return uwTick;  
 8000cdc:	4b03      	ldr	r3, [pc, #12]	; (8000cec <HAL_GetTick+0x14>)
 8000cde:	681b      	ldr	r3, [r3, #0]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	20000470 	.word	0x20000470

08000cf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d00:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <__NVIC_SetPriorityGrouping+0x44>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d06:	68ba      	ldr	r2, [r7, #8]
 8000d08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d22:	4a04      	ldr	r2, [pc, #16]	; (8000d34 <__NVIC_SetPriorityGrouping+0x44>)
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	60d3      	str	r3, [r2, #12]
}
 8000d28:	bf00      	nop
 8000d2a:	3714      	adds	r7, #20
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d3c:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <__NVIC_GetPriorityGrouping+0x18>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	0a1b      	lsrs	r3, r3, #8
 8000d42:	f003 0307 	and.w	r3, r3, #7
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	db0b      	blt.n	8000d7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	f003 021f 	and.w	r2, r3, #31
 8000d6c:	4907      	ldr	r1, [pc, #28]	; (8000d8c <__NVIC_EnableIRQ+0x38>)
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	095b      	lsrs	r3, r3, #5
 8000d74:	2001      	movs	r0, #1
 8000d76:	fa00 f202 	lsl.w	r2, r0, r2
 8000d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d7e:	bf00      	nop
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	e000e100 	.word	0xe000e100

08000d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	6039      	str	r1, [r7, #0]
 8000d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	db0a      	blt.n	8000dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	490c      	ldr	r1, [pc, #48]	; (8000ddc <__NVIC_SetPriority+0x4c>)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	0112      	lsls	r2, r2, #4
 8000db0:	b2d2      	uxtb	r2, r2
 8000db2:	440b      	add	r3, r1
 8000db4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db8:	e00a      	b.n	8000dd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	4908      	ldr	r1, [pc, #32]	; (8000de0 <__NVIC_SetPriority+0x50>)
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	f003 030f 	and.w	r3, r3, #15
 8000dc6:	3b04      	subs	r3, #4
 8000dc8:	0112      	lsls	r2, r2, #4
 8000dca:	b2d2      	uxtb	r2, r2
 8000dcc:	440b      	add	r3, r1
 8000dce:	761a      	strb	r2, [r3, #24]
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000e100 	.word	0xe000e100
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b089      	sub	sp, #36	; 0x24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	f1c3 0307 	rsb	r3, r3, #7
 8000dfe:	2b04      	cmp	r3, #4
 8000e00:	bf28      	it	cs
 8000e02:	2304      	movcs	r3, #4
 8000e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3304      	adds	r3, #4
 8000e0a:	2b06      	cmp	r3, #6
 8000e0c:	d902      	bls.n	8000e14 <NVIC_EncodePriority+0x30>
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3b03      	subs	r3, #3
 8000e12:	e000      	b.n	8000e16 <NVIC_EncodePriority+0x32>
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43da      	mvns	r2, r3
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	401a      	ands	r2, r3
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	fa01 f303 	lsl.w	r3, r1, r3
 8000e36:	43d9      	mvns	r1, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e3c:	4313      	orrs	r3, r2
         );
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3724      	adds	r7, #36	; 0x24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
	...

08000e4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3b01      	subs	r3, #1
 8000e58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e5c:	d301      	bcc.n	8000e62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e00f      	b.n	8000e82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e62:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <SysTick_Config+0x40>)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3b01      	subs	r3, #1
 8000e68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e6a:	210f      	movs	r1, #15
 8000e6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e70:	f7ff ff8e 	bl	8000d90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e74:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <SysTick_Config+0x40>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e7a:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <SysTick_Config+0x40>)
 8000e7c:	2207      	movs	r2, #7
 8000e7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	e000e010 	.word	0xe000e010

08000e90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f7ff ff29 	bl	8000cf0 <__NVIC_SetPriorityGrouping>
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b086      	sub	sp, #24
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	4603      	mov	r3, r0
 8000eae:	60b9      	str	r1, [r7, #8]
 8000eb0:	607a      	str	r2, [r7, #4]
 8000eb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb8:	f7ff ff3e 	bl	8000d38 <__NVIC_GetPriorityGrouping>
 8000ebc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	68b9      	ldr	r1, [r7, #8]
 8000ec2:	6978      	ldr	r0, [r7, #20]
 8000ec4:	f7ff ff8e 	bl	8000de4 <NVIC_EncodePriority>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ece:	4611      	mov	r1, r2
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff ff5d 	bl	8000d90 <__NVIC_SetPriority>
}
 8000ed6:	bf00      	nop
 8000ed8:	3718      	adds	r7, #24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff ff31 	bl	8000d54 <__NVIC_EnableIRQ>
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff ffa2 	bl	8000e4c <SysTick_Config>
 8000f08:	4603      	mov	r3, r0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
	...

08000f14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b087      	sub	sp, #28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f22:	e154      	b.n	80011ce <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	2101      	movs	r1, #1
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f30:	4013      	ands	r3, r2
 8000f32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	f000 8146 	beq.w	80011c8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f003 0303 	and.w	r3, r3, #3
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d005      	beq.n	8000f54 <HAL_GPIO_Init+0x40>
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 0303 	and.w	r3, r3, #3
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d130      	bne.n	8000fb6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	2203      	movs	r2, #3
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	68da      	ldr	r2, [r3, #12]
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43db      	mvns	r3, r3
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	4013      	ands	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	091b      	lsrs	r3, r3, #4
 8000fa0:	f003 0201 	and.w	r2, r3, #1
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f003 0303 	and.w	r3, r3, #3
 8000fbe:	2b03      	cmp	r3, #3
 8000fc0:	d017      	beq.n	8000ff2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	2203      	movs	r2, #3
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	689a      	ldr	r2, [r3, #8]
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f003 0303 	and.w	r3, r3, #3
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d123      	bne.n	8001046 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	08da      	lsrs	r2, r3, #3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3208      	adds	r2, #8
 8001006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800100a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	220f      	movs	r2, #15
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43db      	mvns	r3, r3
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	4013      	ands	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	691a      	ldr	r2, [r3, #16]
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	f003 0307 	and.w	r3, r3, #7
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4313      	orrs	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	08da      	lsrs	r2, r3, #3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3208      	adds	r2, #8
 8001040:	6939      	ldr	r1, [r7, #16]
 8001042:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	2203      	movs	r2, #3
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43db      	mvns	r3, r3
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	4013      	ands	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f003 0203 	and.w	r2, r3, #3
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	4313      	orrs	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001082:	2b00      	cmp	r3, #0
 8001084:	f000 80a0 	beq.w	80011c8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001088:	4b58      	ldr	r3, [pc, #352]	; (80011ec <HAL_GPIO_Init+0x2d8>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	4a57      	ldr	r2, [pc, #348]	; (80011ec <HAL_GPIO_Init+0x2d8>)
 800108e:	f043 0301 	orr.w	r3, r3, #1
 8001092:	6193      	str	r3, [r2, #24]
 8001094:	4b55      	ldr	r3, [pc, #340]	; (80011ec <HAL_GPIO_Init+0x2d8>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	f003 0301 	and.w	r3, r3, #1
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010a0:	4a53      	ldr	r2, [pc, #332]	; (80011f0 <HAL_GPIO_Init+0x2dc>)
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	089b      	lsrs	r3, r3, #2
 80010a6:	3302      	adds	r3, #2
 80010a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	f003 0303 	and.w	r3, r3, #3
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	220f      	movs	r2, #15
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	4013      	ands	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010ca:	d019      	beq.n	8001100 <HAL_GPIO_Init+0x1ec>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4a49      	ldr	r2, [pc, #292]	; (80011f4 <HAL_GPIO_Init+0x2e0>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d013      	beq.n	80010fc <HAL_GPIO_Init+0x1e8>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4a48      	ldr	r2, [pc, #288]	; (80011f8 <HAL_GPIO_Init+0x2e4>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d00d      	beq.n	80010f8 <HAL_GPIO_Init+0x1e4>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4a47      	ldr	r2, [pc, #284]	; (80011fc <HAL_GPIO_Init+0x2e8>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d007      	beq.n	80010f4 <HAL_GPIO_Init+0x1e0>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a46      	ldr	r2, [pc, #280]	; (8001200 <HAL_GPIO_Init+0x2ec>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d101      	bne.n	80010f0 <HAL_GPIO_Init+0x1dc>
 80010ec:	2304      	movs	r3, #4
 80010ee:	e008      	b.n	8001102 <HAL_GPIO_Init+0x1ee>
 80010f0:	2305      	movs	r3, #5
 80010f2:	e006      	b.n	8001102 <HAL_GPIO_Init+0x1ee>
 80010f4:	2303      	movs	r3, #3
 80010f6:	e004      	b.n	8001102 <HAL_GPIO_Init+0x1ee>
 80010f8:	2302      	movs	r3, #2
 80010fa:	e002      	b.n	8001102 <HAL_GPIO_Init+0x1ee>
 80010fc:	2301      	movs	r3, #1
 80010fe:	e000      	b.n	8001102 <HAL_GPIO_Init+0x1ee>
 8001100:	2300      	movs	r3, #0
 8001102:	697a      	ldr	r2, [r7, #20]
 8001104:	f002 0203 	and.w	r2, r2, #3
 8001108:	0092      	lsls	r2, r2, #2
 800110a:	4093      	lsls	r3, r2
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	4313      	orrs	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001112:	4937      	ldr	r1, [pc, #220]	; (80011f0 <HAL_GPIO_Init+0x2dc>)
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	089b      	lsrs	r3, r3, #2
 8001118:	3302      	adds	r3, #2
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001120:	4b38      	ldr	r3, [pc, #224]	; (8001204 <HAL_GPIO_Init+0x2f0>)
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	43db      	mvns	r3, r3
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4013      	ands	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d003      	beq.n	8001144 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	4313      	orrs	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001144:	4a2f      	ldr	r2, [pc, #188]	; (8001204 <HAL_GPIO_Init+0x2f0>)
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800114a:	4b2e      	ldr	r3, [pc, #184]	; (8001204 <HAL_GPIO_Init+0x2f0>)
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	43db      	mvns	r3, r3
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	4013      	ands	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4313      	orrs	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800116e:	4a25      	ldr	r2, [pc, #148]	; (8001204 <HAL_GPIO_Init+0x2f0>)
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001174:	4b23      	ldr	r3, [pc, #140]	; (8001204 <HAL_GPIO_Init+0x2f0>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	43db      	mvns	r3, r3
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	4013      	ands	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d003      	beq.n	8001198 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	4313      	orrs	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001198:	4a1a      	ldr	r2, [pc, #104]	; (8001204 <HAL_GPIO_Init+0x2f0>)
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800119e:	4b19      	ldr	r3, [pc, #100]	; (8001204 <HAL_GPIO_Init+0x2f0>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	43db      	mvns	r3, r3
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	4013      	ands	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4313      	orrs	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80011c2:	4a10      	ldr	r2, [pc, #64]	; (8001204 <HAL_GPIO_Init+0x2f0>)
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	3301      	adds	r3, #1
 80011cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	fa22 f303 	lsr.w	r3, r2, r3
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f47f aea3 	bne.w	8000f24 <HAL_GPIO_Init+0x10>
  }
}
 80011de:	bf00      	nop
 80011e0:	bf00      	nop
 80011e2:	371c      	adds	r7, #28
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	40021000 	.word	0x40021000
 80011f0:	40010000 	.word	0x40010000
 80011f4:	48000400 	.word	0x48000400
 80011f8:	48000800 	.word	0x48000800
 80011fc:	48000c00 	.word	0x48000c00
 8001200:	48001000 	.word	0x48001000
 8001204:	40010400 	.word	0x40010400

08001208 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	460b      	mov	r3, r1
 8001212:	807b      	strh	r3, [r7, #2]
 8001214:	4613      	mov	r3, r2
 8001216:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001218:	787b      	ldrb	r3, [r7, #1]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800121e:	887a      	ldrh	r2, [r7, #2]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001224:	e002      	b.n	800122c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001226:	887a      	ldrh	r2, [r7, #2]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d101      	bne.n	800124a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e081      	b.n	800134e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001250:	b2db      	uxtb	r3, r3
 8001252:	2b00      	cmp	r3, #0
 8001254:	d106      	bne.n	8001264 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff fb38 	bl	80008d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2224      	movs	r2, #36	; 0x24
 8001268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f022 0201 	bic.w	r2, r2, #1
 800127a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685a      	ldr	r2, [r3, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001288:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001298:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d107      	bne.n	80012b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	689a      	ldr	r2, [r3, #8]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	e006      	b.n	80012c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	689a      	ldr	r2, [r3, #8]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80012be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d104      	bne.n	80012d2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	6812      	ldr	r2, [r2, #0]
 80012dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	68da      	ldr	r2, [r3, #12]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	691a      	ldr	r2, [r3, #16]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	430a      	orrs	r2, r1
 800130e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	69d9      	ldr	r1, [r3, #28]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a1a      	ldr	r2, [r3, #32]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	430a      	orrs	r2, r1
 800131e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f042 0201 	orr.w	r2, r2, #1
 800132e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2220      	movs	r2, #32
 800133a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001356:	b480      	push	{r7}
 8001358:	b083      	sub	sp, #12
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
 800135e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001366:	b2db      	uxtb	r3, r3
 8001368:	2b20      	cmp	r3, #32
 800136a:	d138      	bne.n	80013de <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001372:	2b01      	cmp	r3, #1
 8001374:	d101      	bne.n	800137a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001376:	2302      	movs	r3, #2
 8001378:	e032      	b.n	80013e0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2201      	movs	r2, #1
 800137e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2224      	movs	r2, #36	; 0x24
 8001386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f022 0201 	bic.w	r2, r2, #1
 8001398:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80013a8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	6819      	ldr	r1, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	683a      	ldr	r2, [r7, #0]
 80013b6:	430a      	orrs	r2, r1
 80013b8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f042 0201 	orr.w	r2, r2, #1
 80013c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2220      	movs	r2, #32
 80013ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80013da:	2300      	movs	r3, #0
 80013dc:	e000      	b.n	80013e0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80013de:	2302      	movs	r3, #2
  }
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b20      	cmp	r3, #32
 8001400:	d139      	bne.n	8001476 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001408:	2b01      	cmp	r3, #1
 800140a:	d101      	bne.n	8001410 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800140c:	2302      	movs	r3, #2
 800140e:	e033      	b.n	8001478 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2201      	movs	r2, #1
 8001414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2224      	movs	r2, #36	; 0x24
 800141c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f022 0201 	bic.w	r2, r2, #1
 800142e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800143e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	021b      	lsls	r3, r3, #8
 8001444:	68fa      	ldr	r2, [r7, #12]
 8001446:	4313      	orrs	r3, r2
 8001448:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f042 0201 	orr.w	r2, r2, #1
 8001460:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2220      	movs	r2, #32
 8001466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001472:	2300      	movs	r3, #0
 8001474:	e000      	b.n	8001478 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001476:	2302      	movs	r3, #2
  }
}
 8001478:	4618      	mov	r0, r3
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001486:	b08b      	sub	sp, #44	; 0x2c
 8001488:	af06      	add	r7, sp, #24
 800148a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d101      	bne.n	8001496 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e0c4      	b.n	8001620 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d106      	bne.n	80014b0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff fb06 	bl	8000abc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2203      	movs	r2, #3
 80014b4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f002 fed5 	bl	800426c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014c2:	2300      	movs	r3, #0
 80014c4:	73fb      	strb	r3, [r7, #15]
 80014c6:	e040      	b.n	800154a <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
 80014ca:	6879      	ldr	r1, [r7, #4]
 80014cc:	1c5a      	adds	r2, r3, #1
 80014ce:	4613      	mov	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4413      	add	r3, r2
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	440b      	add	r3, r1
 80014d8:	3301      	adds	r3, #1
 80014da:	2201      	movs	r2, #1
 80014dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014de:	7bfb      	ldrb	r3, [r7, #15]
 80014e0:	6879      	ldr	r1, [r7, #4]
 80014e2:	1c5a      	adds	r2, r3, #1
 80014e4:	4613      	mov	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	440b      	add	r3, r1
 80014ee:	7bfa      	ldrb	r2, [r7, #15]
 80014f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014f2:	7bfb      	ldrb	r3, [r7, #15]
 80014f4:	6879      	ldr	r1, [r7, #4]
 80014f6:	1c5a      	adds	r2, r3, #1
 80014f8:	4613      	mov	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	440b      	add	r3, r1
 8001502:	3303      	adds	r3, #3
 8001504:	2200      	movs	r2, #0
 8001506:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001508:	7bfa      	ldrb	r2, [r7, #15]
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	4613      	mov	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	4413      	add	r3, r2
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	440b      	add	r3, r1
 8001516:	3338      	adds	r3, #56	; 0x38
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800151c:	7bfa      	ldrb	r2, [r7, #15]
 800151e:	6879      	ldr	r1, [r7, #4]
 8001520:	4613      	mov	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	4413      	add	r3, r2
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	440b      	add	r3, r1
 800152a:	333c      	adds	r3, #60	; 0x3c
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001530:	7bfa      	ldrb	r2, [r7, #15]
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	4613      	mov	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4413      	add	r3, r2
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	440b      	add	r3, r1
 800153e:	3340      	adds	r3, #64	; 0x40
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001544:	7bfb      	ldrb	r3, [r7, #15]
 8001546:	3301      	adds	r3, #1
 8001548:	73fb      	strb	r3, [r7, #15]
 800154a:	7bfa      	ldrb	r2, [r7, #15]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	429a      	cmp	r2, r3
 8001552:	d3b9      	bcc.n	80014c8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001554:	2300      	movs	r3, #0
 8001556:	73fb      	strb	r3, [r7, #15]
 8001558:	e044      	b.n	80015e4 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800155a:	7bfa      	ldrb	r2, [r7, #15]
 800155c:	6879      	ldr	r1, [r7, #4]
 800155e:	4613      	mov	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	4413      	add	r3, r2
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	440b      	add	r3, r1
 8001568:	f203 1369 	addw	r3, r3, #361	; 0x169
 800156c:	2200      	movs	r2, #0
 800156e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001570:	7bfa      	ldrb	r2, [r7, #15]
 8001572:	6879      	ldr	r1, [r7, #4]
 8001574:	4613      	mov	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	4413      	add	r3, r2
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	440b      	add	r3, r1
 800157e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001582:	7bfa      	ldrb	r2, [r7, #15]
 8001584:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001586:	7bfa      	ldrb	r2, [r7, #15]
 8001588:	6879      	ldr	r1, [r7, #4]
 800158a:	4613      	mov	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	4413      	add	r3, r2
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	440b      	add	r3, r1
 8001594:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001598:	2200      	movs	r2, #0
 800159a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800159c:	7bfa      	ldrb	r2, [r7, #15]
 800159e:	6879      	ldr	r1, [r7, #4]
 80015a0:	4613      	mov	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	4413      	add	r3, r2
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	440b      	add	r3, r1
 80015aa:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015b2:	7bfa      	ldrb	r2, [r7, #15]
 80015b4:	6879      	ldr	r1, [r7, #4]
 80015b6:	4613      	mov	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	440b      	add	r3, r1
 80015c0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015c8:	7bfa      	ldrb	r2, [r7, #15]
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	4613      	mov	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	440b      	add	r3, r1
 80015d6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015de:	7bfb      	ldrb	r3, [r7, #15]
 80015e0:	3301      	adds	r3, #1
 80015e2:	73fb      	strb	r3, [r7, #15]
 80015e4:	7bfa      	ldrb	r2, [r7, #15]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d3b5      	bcc.n	800155a <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	603b      	str	r3, [r7, #0]
 80015f4:	687e      	ldr	r6, [r7, #4]
 80015f6:	466d      	mov	r5, sp
 80015f8:	f106 0410 	add.w	r4, r6, #16
 80015fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001600:	6823      	ldr	r3, [r4, #0]
 8001602:	602b      	str	r3, [r5, #0]
 8001604:	1d33      	adds	r3, r6, #4
 8001606:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001608:	6838      	ldr	r0, [r7, #0]
 800160a:	f002 fe4a 	bl	80042a2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2201      	movs	r2, #1
 800161a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001628 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800162e:	af00      	add	r7, sp, #0
 8001630:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001634:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001638:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800163a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800163e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d102      	bne.n	800164e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	f001 b823 	b.w	8002694 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800164e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001652:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	2b00      	cmp	r3, #0
 8001660:	f000 817d 	beq.w	800195e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001664:	4bbc      	ldr	r3, [pc, #752]	; (8001958 <HAL_RCC_OscConfig+0x330>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 030c 	and.w	r3, r3, #12
 800166c:	2b04      	cmp	r3, #4
 800166e:	d00c      	beq.n	800168a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001670:	4bb9      	ldr	r3, [pc, #740]	; (8001958 <HAL_RCC_OscConfig+0x330>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 030c 	and.w	r3, r3, #12
 8001678:	2b08      	cmp	r3, #8
 800167a:	d15c      	bne.n	8001736 <HAL_RCC_OscConfig+0x10e>
 800167c:	4bb6      	ldr	r3, [pc, #728]	; (8001958 <HAL_RCC_OscConfig+0x330>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001688:	d155      	bne.n	8001736 <HAL_RCC_OscConfig+0x10e>
 800168a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800168e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001692:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001696:	fa93 f3a3 	rbit	r3, r3
 800169a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800169e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a2:	fab3 f383 	clz	r3, r3
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	095b      	lsrs	r3, r3, #5
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d102      	bne.n	80016bc <HAL_RCC_OscConfig+0x94>
 80016b6:	4ba8      	ldr	r3, [pc, #672]	; (8001958 <HAL_RCC_OscConfig+0x330>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	e015      	b.n	80016e8 <HAL_RCC_OscConfig+0xc0>
 80016bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016c0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80016c8:	fa93 f3a3 	rbit	r3, r3
 80016cc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80016d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016d4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80016d8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80016dc:	fa93 f3a3 	rbit	r3, r3
 80016e0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80016e4:	4b9c      	ldr	r3, [pc, #624]	; (8001958 <HAL_RCC_OscConfig+0x330>)
 80016e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016ec:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80016f0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80016f4:	fa92 f2a2 	rbit	r2, r2
 80016f8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80016fc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001700:	fab2 f282 	clz	r2, r2
 8001704:	b2d2      	uxtb	r2, r2
 8001706:	f042 0220 	orr.w	r2, r2, #32
 800170a:	b2d2      	uxtb	r2, r2
 800170c:	f002 021f 	and.w	r2, r2, #31
 8001710:	2101      	movs	r1, #1
 8001712:	fa01 f202 	lsl.w	r2, r1, r2
 8001716:	4013      	ands	r3, r2
 8001718:	2b00      	cmp	r3, #0
 800171a:	f000 811f 	beq.w	800195c <HAL_RCC_OscConfig+0x334>
 800171e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001722:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	f040 8116 	bne.w	800195c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	f000 bfaf 	b.w	8002694 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800173a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001746:	d106      	bne.n	8001756 <HAL_RCC_OscConfig+0x12e>
 8001748:	4b83      	ldr	r3, [pc, #524]	; (8001958 <HAL_RCC_OscConfig+0x330>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a82      	ldr	r2, [pc, #520]	; (8001958 <HAL_RCC_OscConfig+0x330>)
 800174e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001752:	6013      	str	r3, [r2, #0]
 8001754:	e036      	b.n	80017c4 <HAL_RCC_OscConfig+0x19c>
 8001756:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800175a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d10c      	bne.n	8001780 <HAL_RCC_OscConfig+0x158>
 8001766:	4b7c      	ldr	r3, [pc, #496]	; (8001958 <HAL_RCC_OscConfig+0x330>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a7b      	ldr	r2, [pc, #492]	; (8001958 <HAL_RCC_OscConfig+0x330>)
 800176c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001770:	6013      	str	r3, [r2, #0]
 8001772:	4b79      	ldr	r3, [pc, #484]	; (8001958 <HAL_RCC_OscConfig+0x330>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a78      	ldr	r2, [pc, #480]	; (8001958 <HAL_RCC_OscConfig+0x330>)
 8001778:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800177c:	6013      	str	r3, [r2, #0]
 800177e:	e021      	b.n	80017c4 <HAL_RCC_OscConfig+0x19c>
 8001780:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001784:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001790:	d10c      	bne.n	80017ac <HAL_RCC_OscConfig+0x184>
 8001792:	4b71      	ldr	r3, [pc, #452]	; (8001958 <HAL_RCC_OscConfig+0x330>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a70      	ldr	r2, [pc, #448]	; (8001958 <HAL_RCC_OscConfig+0x330>)
 8001798:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800179c:	6013      	str	r3, [r2, #0]
 800179e:	4b6e      	ldr	r3, [pc, #440]	; (8001958 <HAL_RCC_OscConfig+0x330>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a6d      	ldr	r2, [pc, #436]	; (8001958 <HAL_RCC_OscConfig+0x330>)
 80017a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017a8:	6013      	str	r3, [r2, #0]
 80017aa:	e00b      	b.n	80017c4 <HAL_RCC_OscConfig+0x19c>
 80017ac:	4b6a      	ldr	r3, [pc, #424]	; (8001958 <HAL_RCC_OscConfig+0x330>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a69      	ldr	r2, [pc, #420]	; (8001958 <HAL_RCC_OscConfig+0x330>)
 80017b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017b6:	6013      	str	r3, [r2, #0]
 80017b8:	4b67      	ldr	r3, [pc, #412]	; (8001958 <HAL_RCC_OscConfig+0x330>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a66      	ldr	r2, [pc, #408]	; (8001958 <HAL_RCC_OscConfig+0x330>)
 80017be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017c2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017c4:	4b64      	ldr	r3, [pc, #400]	; (8001958 <HAL_RCC_OscConfig+0x330>)
 80017c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c8:	f023 020f 	bic.w	r2, r3, #15
 80017cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	495f      	ldr	r1, [pc, #380]	; (8001958 <HAL_RCC_OscConfig+0x330>)
 80017da:	4313      	orrs	r3, r2
 80017dc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d059      	beq.n	80018a2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ee:	f7ff fa73 	bl	8000cd8 <HAL_GetTick>
 80017f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f6:	e00a      	b.n	800180e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017f8:	f7ff fa6e 	bl	8000cd8 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b64      	cmp	r3, #100	; 0x64
 8001806:	d902      	bls.n	800180e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	f000 bf43 	b.w	8002694 <HAL_RCC_OscConfig+0x106c>
 800180e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001812:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001816:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800181a:	fa93 f3a3 	rbit	r3, r3
 800181e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001822:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001826:	fab3 f383 	clz	r3, r3
 800182a:	b2db      	uxtb	r3, r3
 800182c:	095b      	lsrs	r3, r3, #5
 800182e:	b2db      	uxtb	r3, r3
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b01      	cmp	r3, #1
 8001838:	d102      	bne.n	8001840 <HAL_RCC_OscConfig+0x218>
 800183a:	4b47      	ldr	r3, [pc, #284]	; (8001958 <HAL_RCC_OscConfig+0x330>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	e015      	b.n	800186c <HAL_RCC_OscConfig+0x244>
 8001840:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001844:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001848:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800184c:	fa93 f3a3 	rbit	r3, r3
 8001850:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001854:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001858:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800185c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001860:	fa93 f3a3 	rbit	r3, r3
 8001864:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001868:	4b3b      	ldr	r3, [pc, #236]	; (8001958 <HAL_RCC_OscConfig+0x330>)
 800186a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001870:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001874:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001878:	fa92 f2a2 	rbit	r2, r2
 800187c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001880:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001884:	fab2 f282 	clz	r2, r2
 8001888:	b2d2      	uxtb	r2, r2
 800188a:	f042 0220 	orr.w	r2, r2, #32
 800188e:	b2d2      	uxtb	r2, r2
 8001890:	f002 021f 	and.w	r2, r2, #31
 8001894:	2101      	movs	r1, #1
 8001896:	fa01 f202 	lsl.w	r2, r1, r2
 800189a:	4013      	ands	r3, r2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0ab      	beq.n	80017f8 <HAL_RCC_OscConfig+0x1d0>
 80018a0:	e05d      	b.n	800195e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a2:	f7ff fa19 	bl	8000cd8 <HAL_GetTick>
 80018a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018aa:	e00a      	b.n	80018c2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018ac:	f7ff fa14 	bl	8000cd8 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b64      	cmp	r3, #100	; 0x64
 80018ba:	d902      	bls.n	80018c2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	f000 bee9 	b.w	8002694 <HAL_RCC_OscConfig+0x106c>
 80018c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018c6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ca:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80018ce:	fa93 f3a3 	rbit	r3, r3
 80018d2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80018d6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018da:	fab3 f383 	clz	r3, r3
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	095b      	lsrs	r3, r3, #5
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d102      	bne.n	80018f4 <HAL_RCC_OscConfig+0x2cc>
 80018ee:	4b1a      	ldr	r3, [pc, #104]	; (8001958 <HAL_RCC_OscConfig+0x330>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	e015      	b.n	8001920 <HAL_RCC_OscConfig+0x2f8>
 80018f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018f8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001900:	fa93 f3a3 	rbit	r3, r3
 8001904:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001908:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800190c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001910:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001914:	fa93 f3a3 	rbit	r3, r3
 8001918:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800191c:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <HAL_RCC_OscConfig+0x330>)
 800191e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001920:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001924:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001928:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800192c:	fa92 f2a2 	rbit	r2, r2
 8001930:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001934:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001938:	fab2 f282 	clz	r2, r2
 800193c:	b2d2      	uxtb	r2, r2
 800193e:	f042 0220 	orr.w	r2, r2, #32
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	f002 021f 	and.w	r2, r2, #31
 8001948:	2101      	movs	r1, #1
 800194a:	fa01 f202 	lsl.w	r2, r1, r2
 800194e:	4013      	ands	r3, r2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1ab      	bne.n	80018ac <HAL_RCC_OscConfig+0x284>
 8001954:	e003      	b.n	800195e <HAL_RCC_OscConfig+0x336>
 8001956:	bf00      	nop
 8001958:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800195c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800195e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001962:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	f000 817d 	beq.w	8001c6e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001974:	4ba6      	ldr	r3, [pc, #664]	; (8001c10 <HAL_RCC_OscConfig+0x5e8>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f003 030c 	and.w	r3, r3, #12
 800197c:	2b00      	cmp	r3, #0
 800197e:	d00b      	beq.n	8001998 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001980:	4ba3      	ldr	r3, [pc, #652]	; (8001c10 <HAL_RCC_OscConfig+0x5e8>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 030c 	and.w	r3, r3, #12
 8001988:	2b08      	cmp	r3, #8
 800198a:	d172      	bne.n	8001a72 <HAL_RCC_OscConfig+0x44a>
 800198c:	4ba0      	ldr	r3, [pc, #640]	; (8001c10 <HAL_RCC_OscConfig+0x5e8>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d16c      	bne.n	8001a72 <HAL_RCC_OscConfig+0x44a>
 8001998:	2302      	movs	r3, #2
 800199a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80019a2:	fa93 f3a3 	rbit	r3, r3
 80019a6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80019aa:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ae:	fab3 f383 	clz	r3, r3
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	095b      	lsrs	r3, r3, #5
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d102      	bne.n	80019c8 <HAL_RCC_OscConfig+0x3a0>
 80019c2:	4b93      	ldr	r3, [pc, #588]	; (8001c10 <HAL_RCC_OscConfig+0x5e8>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	e013      	b.n	80019f0 <HAL_RCC_OscConfig+0x3c8>
 80019c8:	2302      	movs	r3, #2
 80019ca:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ce:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80019d2:	fa93 f3a3 	rbit	r3, r3
 80019d6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80019da:	2302      	movs	r3, #2
 80019dc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80019e0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80019e4:	fa93 f3a3 	rbit	r3, r3
 80019e8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80019ec:	4b88      	ldr	r3, [pc, #544]	; (8001c10 <HAL_RCC_OscConfig+0x5e8>)
 80019ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f0:	2202      	movs	r2, #2
 80019f2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80019f6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80019fa:	fa92 f2a2 	rbit	r2, r2
 80019fe:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001a02:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001a06:	fab2 f282 	clz	r2, r2
 8001a0a:	b2d2      	uxtb	r2, r2
 8001a0c:	f042 0220 	orr.w	r2, r2, #32
 8001a10:	b2d2      	uxtb	r2, r2
 8001a12:	f002 021f 	and.w	r2, r2, #31
 8001a16:	2101      	movs	r1, #1
 8001a18:	fa01 f202 	lsl.w	r2, r1, r2
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d00a      	beq.n	8001a38 <HAL_RCC_OscConfig+0x410>
 8001a22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d002      	beq.n	8001a38 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	f000 be2e 	b.w	8002694 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a38:	4b75      	ldr	r3, [pc, #468]	; (8001c10 <HAL_RCC_OscConfig+0x5e8>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	21f8      	movs	r1, #248	; 0xf8
 8001a4e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a52:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001a56:	fa91 f1a1 	rbit	r1, r1
 8001a5a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001a5e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001a62:	fab1 f181 	clz	r1, r1
 8001a66:	b2c9      	uxtb	r1, r1
 8001a68:	408b      	lsls	r3, r1
 8001a6a:	4969      	ldr	r1, [pc, #420]	; (8001c10 <HAL_RCC_OscConfig+0x5e8>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a70:	e0fd      	b.n	8001c6e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 8088 	beq.w	8001b94 <HAL_RCC_OscConfig+0x56c>
 8001a84:	2301      	movs	r3, #1
 8001a86:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001a8e:	fa93 f3a3 	rbit	r3, r3
 8001a92:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001a96:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a9a:	fab3 f383 	clz	r3, r3
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001aa4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	461a      	mov	r2, r3
 8001aac:	2301      	movs	r3, #1
 8001aae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab0:	f7ff f912 	bl	8000cd8 <HAL_GetTick>
 8001ab4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab8:	e00a      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aba:	f7ff f90d 	bl	8000cd8 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d902      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	f000 bde2 	b.w	8002694 <HAL_RCC_OscConfig+0x106c>
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001ada:	fa93 f3a3 	rbit	r3, r3
 8001ade:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001ae2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae6:	fab3 f383 	clz	r3, r3
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	095b      	lsrs	r3, r3, #5
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d102      	bne.n	8001b00 <HAL_RCC_OscConfig+0x4d8>
 8001afa:	4b45      	ldr	r3, [pc, #276]	; (8001c10 <HAL_RCC_OscConfig+0x5e8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	e013      	b.n	8001b28 <HAL_RCC_OscConfig+0x500>
 8001b00:	2302      	movs	r3, #2
 8001b02:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b06:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001b0a:	fa93 f3a3 	rbit	r3, r3
 8001b0e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001b12:	2302      	movs	r3, #2
 8001b14:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001b18:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001b1c:	fa93 f3a3 	rbit	r3, r3
 8001b20:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001b24:	4b3a      	ldr	r3, [pc, #232]	; (8001c10 <HAL_RCC_OscConfig+0x5e8>)
 8001b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b28:	2202      	movs	r2, #2
 8001b2a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001b2e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001b32:	fa92 f2a2 	rbit	r2, r2
 8001b36:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001b3a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001b3e:	fab2 f282 	clz	r2, r2
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	f042 0220 	orr.w	r2, r2, #32
 8001b48:	b2d2      	uxtb	r2, r2
 8001b4a:	f002 021f 	and.w	r2, r2, #31
 8001b4e:	2101      	movs	r1, #1
 8001b50:	fa01 f202 	lsl.w	r2, r1, r2
 8001b54:	4013      	ands	r3, r2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d0af      	beq.n	8001aba <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b5a:	4b2d      	ldr	r3, [pc, #180]	; (8001c10 <HAL_RCC_OscConfig+0x5e8>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	21f8      	movs	r1, #248	; 0xf8
 8001b70:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b74:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001b78:	fa91 f1a1 	rbit	r1, r1
 8001b7c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001b80:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001b84:	fab1 f181 	clz	r1, r1
 8001b88:	b2c9      	uxtb	r1, r1
 8001b8a:	408b      	lsls	r3, r1
 8001b8c:	4920      	ldr	r1, [pc, #128]	; (8001c10 <HAL_RCC_OscConfig+0x5e8>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	600b      	str	r3, [r1, #0]
 8001b92:	e06c      	b.n	8001c6e <HAL_RCC_OscConfig+0x646>
 8001b94:	2301      	movs	r3, #1
 8001b96:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001b9e:	fa93 f3a3 	rbit	r3, r3
 8001ba2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001ba6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001baa:	fab3 f383 	clz	r3, r3
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bb4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	461a      	mov	r2, r3
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc0:	f7ff f88a 	bl	8000cd8 <HAL_GetTick>
 8001bc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bc8:	e00a      	b.n	8001be0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bca:	f7ff f885 	bl	8000cd8 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d902      	bls.n	8001be0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	f000 bd5a 	b.w	8002694 <HAL_RCC_OscConfig+0x106c>
 8001be0:	2302      	movs	r3, #2
 8001be2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001bea:	fa93 f3a3 	rbit	r3, r3
 8001bee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001bf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bf6:	fab3 f383 	clz	r3, r3
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	095b      	lsrs	r3, r3, #5
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d104      	bne.n	8001c14 <HAL_RCC_OscConfig+0x5ec>
 8001c0a:	4b01      	ldr	r3, [pc, #4]	; (8001c10 <HAL_RCC_OscConfig+0x5e8>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	e015      	b.n	8001c3c <HAL_RCC_OscConfig+0x614>
 8001c10:	40021000 	.word	0x40021000
 8001c14:	2302      	movs	r3, #2
 8001c16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001c1e:	fa93 f3a3 	rbit	r3, r3
 8001c22:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001c26:	2302      	movs	r3, #2
 8001c28:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001c2c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001c30:	fa93 f3a3 	rbit	r3, r3
 8001c34:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001c38:	4bc8      	ldr	r3, [pc, #800]	; (8001f5c <HAL_RCC_OscConfig+0x934>)
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001c42:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001c46:	fa92 f2a2 	rbit	r2, r2
 8001c4a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001c4e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001c52:	fab2 f282 	clz	r2, r2
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	f042 0220 	orr.w	r2, r2, #32
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	f002 021f 	and.w	r2, r2, #31
 8001c62:	2101      	movs	r1, #1
 8001c64:	fa01 f202 	lsl.w	r2, r1, r2
 8001c68:	4013      	ands	r3, r2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1ad      	bne.n	8001bca <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0308 	and.w	r3, r3, #8
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f000 8110 	beq.w	8001ea4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d079      	beq.n	8001d88 <HAL_RCC_OscConfig+0x760>
 8001c94:	2301      	movs	r3, #1
 8001c96:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001c9e:	fa93 f3a3 	rbit	r3, r3
 8001ca2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001ca6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001caa:	fab3 f383 	clz	r3, r3
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4bab      	ldr	r3, [pc, #684]	; (8001f60 <HAL_RCC_OscConfig+0x938>)
 8001cb4:	4413      	add	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	461a      	mov	r2, r3
 8001cba:	2301      	movs	r3, #1
 8001cbc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cbe:	f7ff f80b 	bl	8000cd8 <HAL_GetTick>
 8001cc2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cc6:	e00a      	b.n	8001cde <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cc8:	f7ff f806 	bl	8000cd8 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d902      	bls.n	8001cde <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	f000 bcdb 	b.w	8002694 <HAL_RCC_OscConfig+0x106c>
 8001cde:	2302      	movs	r3, #2
 8001ce0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001ce8:	fa93 f3a3 	rbit	r3, r3
 8001cec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001cf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001cf8:	2202      	movs	r2, #2
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d00:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	fa93 f2a3 	rbit	r2, r3
 8001d0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001d1c:	2202      	movs	r2, #2
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	fa93 f2a3 	rbit	r2, r3
 8001d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d32:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001d36:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d38:	4b88      	ldr	r3, [pc, #544]	; (8001f5c <HAL_RCC_OscConfig+0x934>)
 8001d3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d40:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d44:	2102      	movs	r1, #2
 8001d46:	6019      	str	r1, [r3, #0]
 8001d48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d4c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	fa93 f1a3 	rbit	r1, r3
 8001d56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d5a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001d5e:	6019      	str	r1, [r3, #0]
  return result;
 8001d60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d64:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	fab3 f383 	clz	r3, r3
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	f003 031f 	and.w	r3, r3, #31
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d80:	4013      	ands	r3, r2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d0a0      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x6a0>
 8001d86:	e08d      	b.n	8001ea4 <HAL_RCC_OscConfig+0x87c>
 8001d88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d8c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001d90:	2201      	movs	r2, #1
 8001d92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d98:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	fa93 f2a3 	rbit	r2, r3
 8001da2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001daa:	601a      	str	r2, [r3, #0]
  return result;
 8001dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001db4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001db6:	fab3 f383 	clz	r3, r3
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	4b68      	ldr	r3, [pc, #416]	; (8001f60 <HAL_RCC_OscConfig+0x938>)
 8001dc0:	4413      	add	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dca:	f7fe ff85 	bl	8000cd8 <HAL_GetTick>
 8001dce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dd2:	e00a      	b.n	8001dea <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dd4:	f7fe ff80 	bl	8000cd8 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d902      	bls.n	8001dea <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	f000 bc55 	b.w	8002694 <HAL_RCC_OscConfig+0x106c>
 8001dea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dee:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001df2:	2202      	movs	r2, #2
 8001df4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dfa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	fa93 f2a3 	rbit	r2, r3
 8001e04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e08:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e12:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001e16:	2202      	movs	r2, #2
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e1e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	fa93 f2a3 	rbit	r2, r3
 8001e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	fa93 f2a3 	rbit	r2, r3
 8001e4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e50:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001e54:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e56:	4b41      	ldr	r3, [pc, #260]	; (8001f5c <HAL_RCC_OscConfig+0x934>)
 8001e58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e5e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001e62:	2102      	movs	r1, #2
 8001e64:	6019      	str	r1, [r3, #0]
 8001e66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e6a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	fa93 f1a3 	rbit	r1, r3
 8001e74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e78:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001e7c:	6019      	str	r1, [r3, #0]
  return result;
 8001e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e82:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	fab3 f383 	clz	r3, r3
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	f003 031f 	and.w	r3, r3, #31
 8001e98:	2101      	movs	r1, #1
 8001e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d197      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ea4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f000 81a1 	beq.w	80021fc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ec0:	4b26      	ldr	r3, [pc, #152]	; (8001f5c <HAL_RCC_OscConfig+0x934>)
 8001ec2:	69db      	ldr	r3, [r3, #28]
 8001ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d116      	bne.n	8001efa <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ecc:	4b23      	ldr	r3, [pc, #140]	; (8001f5c <HAL_RCC_OscConfig+0x934>)
 8001ece:	69db      	ldr	r3, [r3, #28]
 8001ed0:	4a22      	ldr	r2, [pc, #136]	; (8001f5c <HAL_RCC_OscConfig+0x934>)
 8001ed2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed6:	61d3      	str	r3, [r2, #28]
 8001ed8:	4b20      	ldr	r3, [pc, #128]	; (8001f5c <HAL_RCC_OscConfig+0x934>)
 8001eda:	69db      	ldr	r3, [r3, #28]
 8001edc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001ee0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eee:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001ef2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001efa:	4b1a      	ldr	r3, [pc, #104]	; (8001f64 <HAL_RCC_OscConfig+0x93c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d11a      	bne.n	8001f3c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f06:	4b17      	ldr	r3, [pc, #92]	; (8001f64 <HAL_RCC_OscConfig+0x93c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a16      	ldr	r2, [pc, #88]	; (8001f64 <HAL_RCC_OscConfig+0x93c>)
 8001f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f10:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f12:	f7fe fee1 	bl	8000cd8 <HAL_GetTick>
 8001f16:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1a:	e009      	b.n	8001f30 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f1c:	f7fe fedc 	bl	8000cd8 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b64      	cmp	r3, #100	; 0x64
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e3b1      	b.n	8002694 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f30:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <HAL_RCC_OscConfig+0x93c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0ef      	beq.n	8001f1c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f40:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d10d      	bne.n	8001f68 <HAL_RCC_OscConfig+0x940>
 8001f4c:	4b03      	ldr	r3, [pc, #12]	; (8001f5c <HAL_RCC_OscConfig+0x934>)
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	4a02      	ldr	r2, [pc, #8]	; (8001f5c <HAL_RCC_OscConfig+0x934>)
 8001f52:	f043 0301 	orr.w	r3, r3, #1
 8001f56:	6213      	str	r3, [r2, #32]
 8001f58:	e03c      	b.n	8001fd4 <HAL_RCC_OscConfig+0x9ac>
 8001f5a:	bf00      	nop
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	10908120 	.word	0x10908120
 8001f64:	40007000 	.word	0x40007000
 8001f68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f6c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d10c      	bne.n	8001f92 <HAL_RCC_OscConfig+0x96a>
 8001f78:	4bc1      	ldr	r3, [pc, #772]	; (8002280 <HAL_RCC_OscConfig+0xc58>)
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	4ac0      	ldr	r2, [pc, #768]	; (8002280 <HAL_RCC_OscConfig+0xc58>)
 8001f7e:	f023 0301 	bic.w	r3, r3, #1
 8001f82:	6213      	str	r3, [r2, #32]
 8001f84:	4bbe      	ldr	r3, [pc, #760]	; (8002280 <HAL_RCC_OscConfig+0xc58>)
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	4abd      	ldr	r2, [pc, #756]	; (8002280 <HAL_RCC_OscConfig+0xc58>)
 8001f8a:	f023 0304 	bic.w	r3, r3, #4
 8001f8e:	6213      	str	r3, [r2, #32]
 8001f90:	e020      	b.n	8001fd4 <HAL_RCC_OscConfig+0x9ac>
 8001f92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	2b05      	cmp	r3, #5
 8001fa0:	d10c      	bne.n	8001fbc <HAL_RCC_OscConfig+0x994>
 8001fa2:	4bb7      	ldr	r3, [pc, #732]	; (8002280 <HAL_RCC_OscConfig+0xc58>)
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	4ab6      	ldr	r2, [pc, #728]	; (8002280 <HAL_RCC_OscConfig+0xc58>)
 8001fa8:	f043 0304 	orr.w	r3, r3, #4
 8001fac:	6213      	str	r3, [r2, #32]
 8001fae:	4bb4      	ldr	r3, [pc, #720]	; (8002280 <HAL_RCC_OscConfig+0xc58>)
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
 8001fb2:	4ab3      	ldr	r2, [pc, #716]	; (8002280 <HAL_RCC_OscConfig+0xc58>)
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	6213      	str	r3, [r2, #32]
 8001fba:	e00b      	b.n	8001fd4 <HAL_RCC_OscConfig+0x9ac>
 8001fbc:	4bb0      	ldr	r3, [pc, #704]	; (8002280 <HAL_RCC_OscConfig+0xc58>)
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	4aaf      	ldr	r2, [pc, #700]	; (8002280 <HAL_RCC_OscConfig+0xc58>)
 8001fc2:	f023 0301 	bic.w	r3, r3, #1
 8001fc6:	6213      	str	r3, [r2, #32]
 8001fc8:	4bad      	ldr	r3, [pc, #692]	; (8002280 <HAL_RCC_OscConfig+0xc58>)
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	4aac      	ldr	r2, [pc, #688]	; (8002280 <HAL_RCC_OscConfig+0xc58>)
 8001fce:	f023 0304 	bic.w	r3, r3, #4
 8001fd2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 8081 	beq.w	80020e8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe6:	f7fe fe77 	bl	8000cd8 <HAL_GetTick>
 8001fea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fee:	e00b      	b.n	8002008 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ff0:	f7fe fe72 	bl	8000cd8 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002000:	4293      	cmp	r3, r2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e345      	b.n	8002694 <HAL_RCC_OscConfig+0x106c>
 8002008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800200c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002010:	2202      	movs	r2, #2
 8002012:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002014:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002018:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	fa93 f2a3 	rbit	r2, r3
 8002022:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002026:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002030:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002034:	2202      	movs	r2, #2
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800203c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	fa93 f2a3 	rbit	r2, r3
 8002046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800204a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800204e:	601a      	str	r2, [r3, #0]
  return result;
 8002050:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002054:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002058:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800205a:	fab3 f383 	clz	r3, r3
 800205e:	b2db      	uxtb	r3, r3
 8002060:	095b      	lsrs	r3, r3, #5
 8002062:	b2db      	uxtb	r3, r3
 8002064:	f043 0302 	orr.w	r3, r3, #2
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d102      	bne.n	8002074 <HAL_RCC_OscConfig+0xa4c>
 800206e:	4b84      	ldr	r3, [pc, #528]	; (8002280 <HAL_RCC_OscConfig+0xc58>)
 8002070:	6a1b      	ldr	r3, [r3, #32]
 8002072:	e013      	b.n	800209c <HAL_RCC_OscConfig+0xa74>
 8002074:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002078:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800207c:	2202      	movs	r2, #2
 800207e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002080:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002084:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	fa93 f2a3 	rbit	r2, r3
 800208e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002092:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	4b79      	ldr	r3, [pc, #484]	; (8002280 <HAL_RCC_OscConfig+0xc58>)
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020a0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80020a4:	2102      	movs	r1, #2
 80020a6:	6011      	str	r1, [r2, #0]
 80020a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020ac:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80020b0:	6812      	ldr	r2, [r2, #0]
 80020b2:	fa92 f1a2 	rbit	r1, r2
 80020b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020ba:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80020be:	6011      	str	r1, [r2, #0]
  return result;
 80020c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020c4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80020c8:	6812      	ldr	r2, [r2, #0]
 80020ca:	fab2 f282 	clz	r2, r2
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	f002 021f 	and.w	r2, r2, #31
 80020da:	2101      	movs	r1, #1
 80020dc:	fa01 f202 	lsl.w	r2, r1, r2
 80020e0:	4013      	ands	r3, r2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d084      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x9c8>
 80020e6:	e07f      	b.n	80021e8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e8:	f7fe fdf6 	bl	8000cd8 <HAL_GetTick>
 80020ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020f0:	e00b      	b.n	800210a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020f2:	f7fe fdf1 	bl	8000cd8 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002102:	4293      	cmp	r3, r2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e2c4      	b.n	8002694 <HAL_RCC_OscConfig+0x106c>
 800210a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800210e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002112:	2202      	movs	r2, #2
 8002114:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002116:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800211a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	fa93 f2a3 	rbit	r2, r3
 8002124:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002128:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002132:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002136:	2202      	movs	r2, #2
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800213e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	fa93 f2a3 	rbit	r2, r3
 8002148:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800214c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002150:	601a      	str	r2, [r3, #0]
  return result;
 8002152:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002156:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800215a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800215c:	fab3 f383 	clz	r3, r3
 8002160:	b2db      	uxtb	r3, r3
 8002162:	095b      	lsrs	r3, r3, #5
 8002164:	b2db      	uxtb	r3, r3
 8002166:	f043 0302 	orr.w	r3, r3, #2
 800216a:	b2db      	uxtb	r3, r3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d102      	bne.n	8002176 <HAL_RCC_OscConfig+0xb4e>
 8002170:	4b43      	ldr	r3, [pc, #268]	; (8002280 <HAL_RCC_OscConfig+0xc58>)
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	e013      	b.n	800219e <HAL_RCC_OscConfig+0xb76>
 8002176:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800217a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800217e:	2202      	movs	r2, #2
 8002180:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002182:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002186:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	fa93 f2a3 	rbit	r2, r3
 8002190:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002194:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	4b39      	ldr	r3, [pc, #228]	; (8002280 <HAL_RCC_OscConfig+0xc58>)
 800219c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021a2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80021a6:	2102      	movs	r1, #2
 80021a8:	6011      	str	r1, [r2, #0]
 80021aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021ae:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80021b2:	6812      	ldr	r2, [r2, #0]
 80021b4:	fa92 f1a2 	rbit	r1, r2
 80021b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021bc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80021c0:	6011      	str	r1, [r2, #0]
  return result;
 80021c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021c6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80021ca:	6812      	ldr	r2, [r2, #0]
 80021cc:	fab2 f282 	clz	r2, r2
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021d6:	b2d2      	uxtb	r2, r2
 80021d8:	f002 021f 	and.w	r2, r2, #31
 80021dc:	2101      	movs	r1, #1
 80021de:	fa01 f202 	lsl.w	r2, r1, r2
 80021e2:	4013      	ands	r3, r2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d184      	bne.n	80020f2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021e8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d105      	bne.n	80021fc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021f0:	4b23      	ldr	r3, [pc, #140]	; (8002280 <HAL_RCC_OscConfig+0xc58>)
 80021f2:	69db      	ldr	r3, [r3, #28]
 80021f4:	4a22      	ldr	r2, [pc, #136]	; (8002280 <HAL_RCC_OscConfig+0xc58>)
 80021f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021fa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002200:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	69db      	ldr	r3, [r3, #28]
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 8242 	beq.w	8002692 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800220e:	4b1c      	ldr	r3, [pc, #112]	; (8002280 <HAL_RCC_OscConfig+0xc58>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f003 030c 	and.w	r3, r3, #12
 8002216:	2b08      	cmp	r3, #8
 8002218:	f000 8213 	beq.w	8002642 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800221c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002220:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	69db      	ldr	r3, [r3, #28]
 8002228:	2b02      	cmp	r3, #2
 800222a:	f040 8162 	bne.w	80024f2 <HAL_RCC_OscConfig+0xeca>
 800222e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002232:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002236:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800223a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002240:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	fa93 f2a3 	rbit	r2, r3
 800224a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800224e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002252:	601a      	str	r2, [r3, #0]
  return result;
 8002254:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002258:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800225c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800225e:	fab3 f383 	clz	r3, r3
 8002262:	b2db      	uxtb	r3, r3
 8002264:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002268:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	461a      	mov	r2, r3
 8002270:	2300      	movs	r3, #0
 8002272:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002274:	f7fe fd30 	bl	8000cd8 <HAL_GetTick>
 8002278:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800227c:	e00c      	b.n	8002298 <HAL_RCC_OscConfig+0xc70>
 800227e:	bf00      	nop
 8002280:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002284:	f7fe fd28 	bl	8000cd8 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e1fd      	b.n	8002694 <HAL_RCC_OscConfig+0x106c>
 8002298:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800229c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80022a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022aa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	fa93 f2a3 	rbit	r2, r3
 80022b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80022bc:	601a      	str	r2, [r3, #0]
  return result;
 80022be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80022c6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022c8:	fab3 f383 	clz	r3, r3
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	095b      	lsrs	r3, r3, #5
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	f043 0301 	orr.w	r3, r3, #1
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d102      	bne.n	80022e2 <HAL_RCC_OscConfig+0xcba>
 80022dc:	4bb0      	ldr	r3, [pc, #704]	; (80025a0 <HAL_RCC_OscConfig+0xf78>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	e027      	b.n	8002332 <HAL_RCC_OscConfig+0xd0a>
 80022e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80022ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	fa93 f2a3 	rbit	r2, r3
 80022fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002302:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800230c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002310:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800231a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	fa93 f2a3 	rbit	r2, r3
 8002324:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002328:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800232c:	601a      	str	r2, [r3, #0]
 800232e:	4b9c      	ldr	r3, [pc, #624]	; (80025a0 <HAL_RCC_OscConfig+0xf78>)
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002336:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800233a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800233e:	6011      	str	r1, [r2, #0]
 8002340:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002344:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002348:	6812      	ldr	r2, [r2, #0]
 800234a:	fa92 f1a2 	rbit	r1, r2
 800234e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002352:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002356:	6011      	str	r1, [r2, #0]
  return result;
 8002358:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800235c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002360:	6812      	ldr	r2, [r2, #0]
 8002362:	fab2 f282 	clz	r2, r2
 8002366:	b2d2      	uxtb	r2, r2
 8002368:	f042 0220 	orr.w	r2, r2, #32
 800236c:	b2d2      	uxtb	r2, r2
 800236e:	f002 021f 	and.w	r2, r2, #31
 8002372:	2101      	movs	r1, #1
 8002374:	fa01 f202 	lsl.w	r2, r1, r2
 8002378:	4013      	ands	r3, r2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d182      	bne.n	8002284 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800237e:	4b88      	ldr	r3, [pc, #544]	; (80025a0 <HAL_RCC_OscConfig+0xf78>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002386:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800238a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002396:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	430b      	orrs	r3, r1
 80023a0:	497f      	ldr	r1, [pc, #508]	; (80025a0 <HAL_RCC_OscConfig+0xf78>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	604b      	str	r3, [r1, #4]
 80023a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023aa:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80023ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	fa93 f2a3 	rbit	r2, r3
 80023c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80023ca:	601a      	str	r2, [r3, #0]
  return result;
 80023cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80023d4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023d6:	fab3 f383 	clz	r3, r3
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	461a      	mov	r2, r3
 80023e8:	2301      	movs	r3, #1
 80023ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ec:	f7fe fc74 	bl	8000cd8 <HAL_GetTick>
 80023f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023f4:	e009      	b.n	800240a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023f6:	f7fe fc6f 	bl	8000cd8 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e144      	b.n	8002694 <HAL_RCC_OscConfig+0x106c>
 800240a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800240e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002412:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002416:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800241c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	fa93 f2a3 	rbit	r2, r3
 8002426:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800242a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800242e:	601a      	str	r2, [r3, #0]
  return result;
 8002430:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002434:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002438:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800243a:	fab3 f383 	clz	r3, r3
 800243e:	b2db      	uxtb	r3, r3
 8002440:	095b      	lsrs	r3, r3, #5
 8002442:	b2db      	uxtb	r3, r3
 8002444:	f043 0301 	orr.w	r3, r3, #1
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b01      	cmp	r3, #1
 800244c:	d102      	bne.n	8002454 <HAL_RCC_OscConfig+0xe2c>
 800244e:	4b54      	ldr	r3, [pc, #336]	; (80025a0 <HAL_RCC_OscConfig+0xf78>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	e027      	b.n	80024a4 <HAL_RCC_OscConfig+0xe7c>
 8002454:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002458:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800245c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002460:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002462:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002466:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	fa93 f2a3 	rbit	r2, r3
 8002470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002474:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800247e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002482:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800248c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	fa93 f2a3 	rbit	r2, r3
 8002496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800249a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	4b3f      	ldr	r3, [pc, #252]	; (80025a0 <HAL_RCC_OscConfig+0xf78>)
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024a8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80024ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80024b0:	6011      	str	r1, [r2, #0]
 80024b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024b6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80024ba:	6812      	ldr	r2, [r2, #0]
 80024bc:	fa92 f1a2 	rbit	r1, r2
 80024c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024c4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80024c8:	6011      	str	r1, [r2, #0]
  return result;
 80024ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024ce:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80024d2:	6812      	ldr	r2, [r2, #0]
 80024d4:	fab2 f282 	clz	r2, r2
 80024d8:	b2d2      	uxtb	r2, r2
 80024da:	f042 0220 	orr.w	r2, r2, #32
 80024de:	b2d2      	uxtb	r2, r2
 80024e0:	f002 021f 	and.w	r2, r2, #31
 80024e4:	2101      	movs	r1, #1
 80024e6:	fa01 f202 	lsl.w	r2, r1, r2
 80024ea:	4013      	ands	r3, r2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d082      	beq.n	80023f6 <HAL_RCC_OscConfig+0xdce>
 80024f0:	e0cf      	b.n	8002692 <HAL_RCC_OscConfig+0x106a>
 80024f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80024fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002504:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	fa93 f2a3 	rbit	r2, r3
 800250e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002512:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002516:	601a      	str	r2, [r3, #0]
  return result;
 8002518:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800251c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002520:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002522:	fab3 f383 	clz	r3, r3
 8002526:	b2db      	uxtb	r3, r3
 8002528:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800252c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	461a      	mov	r2, r3
 8002534:	2300      	movs	r3, #0
 8002536:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002538:	f7fe fbce 	bl	8000cd8 <HAL_GetTick>
 800253c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002540:	e009      	b.n	8002556 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002542:	f7fe fbc9 	bl	8000cd8 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e09e      	b.n	8002694 <HAL_RCC_OscConfig+0x106c>
 8002556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800255e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002562:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002568:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	fa93 f2a3 	rbit	r2, r3
 8002572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002576:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800257a:	601a      	str	r2, [r3, #0]
  return result;
 800257c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002580:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002584:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002586:	fab3 f383 	clz	r3, r3
 800258a:	b2db      	uxtb	r3, r3
 800258c:	095b      	lsrs	r3, r3, #5
 800258e:	b2db      	uxtb	r3, r3
 8002590:	f043 0301 	orr.w	r3, r3, #1
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b01      	cmp	r3, #1
 8002598:	d104      	bne.n	80025a4 <HAL_RCC_OscConfig+0xf7c>
 800259a:	4b01      	ldr	r3, [pc, #4]	; (80025a0 <HAL_RCC_OscConfig+0xf78>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	e029      	b.n	80025f4 <HAL_RCC_OscConfig+0xfcc>
 80025a0:	40021000 	.word	0x40021000
 80025a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80025ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	fa93 f2a3 	rbit	r2, r3
 80025c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ce:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80025d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025dc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	fa93 f2a3 	rbit	r2, r3
 80025e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ea:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	4b2b      	ldr	r3, [pc, #172]	; (80026a0 <HAL_RCC_OscConfig+0x1078>)
 80025f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025f8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80025fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002600:	6011      	str	r1, [r2, #0]
 8002602:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002606:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800260a:	6812      	ldr	r2, [r2, #0]
 800260c:	fa92 f1a2 	rbit	r1, r2
 8002610:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002614:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002618:	6011      	str	r1, [r2, #0]
  return result;
 800261a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800261e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002622:	6812      	ldr	r2, [r2, #0]
 8002624:	fab2 f282 	clz	r2, r2
 8002628:	b2d2      	uxtb	r2, r2
 800262a:	f042 0220 	orr.w	r2, r2, #32
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	f002 021f 	and.w	r2, r2, #31
 8002634:	2101      	movs	r1, #1
 8002636:	fa01 f202 	lsl.w	r2, r1, r2
 800263a:	4013      	ands	r3, r2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d180      	bne.n	8002542 <HAL_RCC_OscConfig+0xf1a>
 8002640:	e027      	b.n	8002692 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002642:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002646:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d101      	bne.n	8002656 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e01e      	b.n	8002694 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002656:	4b12      	ldr	r3, [pc, #72]	; (80026a0 <HAL_RCC_OscConfig+0x1078>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800265e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002662:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002666:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800266a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	429a      	cmp	r2, r3
 8002674:	d10b      	bne.n	800268e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002676:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800267a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800267e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002682:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800268a:	429a      	cmp	r2, r3
 800268c:	d001      	beq.n	8002692 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e000      	b.n	8002694 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40021000 	.word	0x40021000

080026a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b09e      	sub	sp, #120	; 0x78
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80026ae:	2300      	movs	r3, #0
 80026b0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e162      	b.n	8002982 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026bc:	4b90      	ldr	r3, [pc, #576]	; (8002900 <HAL_RCC_ClockConfig+0x25c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d910      	bls.n	80026ec <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ca:	4b8d      	ldr	r3, [pc, #564]	; (8002900 <HAL_RCC_ClockConfig+0x25c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f023 0207 	bic.w	r2, r3, #7
 80026d2:	498b      	ldr	r1, [pc, #556]	; (8002900 <HAL_RCC_ClockConfig+0x25c>)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026da:	4b89      	ldr	r3, [pc, #548]	; (8002900 <HAL_RCC_ClockConfig+0x25c>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d001      	beq.n	80026ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e14a      	b.n	8002982 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d008      	beq.n	800270a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026f8:	4b82      	ldr	r3, [pc, #520]	; (8002904 <HAL_RCC_ClockConfig+0x260>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	497f      	ldr	r1, [pc, #508]	; (8002904 <HAL_RCC_ClockConfig+0x260>)
 8002706:	4313      	orrs	r3, r2
 8002708:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 80dc 	beq.w	80028d0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d13c      	bne.n	800279a <HAL_RCC_ClockConfig+0xf6>
 8002720:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002724:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002726:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002728:	fa93 f3a3 	rbit	r3, r3
 800272c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800272e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002730:	fab3 f383 	clz	r3, r3
 8002734:	b2db      	uxtb	r3, r3
 8002736:	095b      	lsrs	r3, r3, #5
 8002738:	b2db      	uxtb	r3, r3
 800273a:	f043 0301 	orr.w	r3, r3, #1
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2b01      	cmp	r3, #1
 8002742:	d102      	bne.n	800274a <HAL_RCC_ClockConfig+0xa6>
 8002744:	4b6f      	ldr	r3, [pc, #444]	; (8002904 <HAL_RCC_ClockConfig+0x260>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	e00f      	b.n	800276a <HAL_RCC_ClockConfig+0xc6>
 800274a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800274e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002750:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002752:	fa93 f3a3 	rbit	r3, r3
 8002756:	667b      	str	r3, [r7, #100]	; 0x64
 8002758:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800275c:	663b      	str	r3, [r7, #96]	; 0x60
 800275e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002760:	fa93 f3a3 	rbit	r3, r3
 8002764:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002766:	4b67      	ldr	r3, [pc, #412]	; (8002904 <HAL_RCC_ClockConfig+0x260>)
 8002768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800276e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002770:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002772:	fa92 f2a2 	rbit	r2, r2
 8002776:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002778:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800277a:	fab2 f282 	clz	r2, r2
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	f042 0220 	orr.w	r2, r2, #32
 8002784:	b2d2      	uxtb	r2, r2
 8002786:	f002 021f 	and.w	r2, r2, #31
 800278a:	2101      	movs	r1, #1
 800278c:	fa01 f202 	lsl.w	r2, r1, r2
 8002790:	4013      	ands	r3, r2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d17b      	bne.n	800288e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e0f3      	b.n	8002982 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d13c      	bne.n	800281c <HAL_RCC_ClockConfig+0x178>
 80027a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027a6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027aa:	fa93 f3a3 	rbit	r3, r3
 80027ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80027b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027b2:	fab3 f383 	clz	r3, r3
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	095b      	lsrs	r3, r3, #5
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	f043 0301 	orr.w	r3, r3, #1
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d102      	bne.n	80027cc <HAL_RCC_ClockConfig+0x128>
 80027c6:	4b4f      	ldr	r3, [pc, #316]	; (8002904 <HAL_RCC_ClockConfig+0x260>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	e00f      	b.n	80027ec <HAL_RCC_ClockConfig+0x148>
 80027cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027d0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027d4:	fa93 f3a3 	rbit	r3, r3
 80027d8:	647b      	str	r3, [r7, #68]	; 0x44
 80027da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027de:	643b      	str	r3, [r7, #64]	; 0x40
 80027e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027e2:	fa93 f3a3 	rbit	r3, r3
 80027e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027e8:	4b46      	ldr	r3, [pc, #280]	; (8002904 <HAL_RCC_ClockConfig+0x260>)
 80027ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027f0:	63ba      	str	r2, [r7, #56]	; 0x38
 80027f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027f4:	fa92 f2a2 	rbit	r2, r2
 80027f8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80027fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027fc:	fab2 f282 	clz	r2, r2
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	f042 0220 	orr.w	r2, r2, #32
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	f002 021f 	and.w	r2, r2, #31
 800280c:	2101      	movs	r1, #1
 800280e:	fa01 f202 	lsl.w	r2, r1, r2
 8002812:	4013      	ands	r3, r2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d13a      	bne.n	800288e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e0b2      	b.n	8002982 <HAL_RCC_ClockConfig+0x2de>
 800281c:	2302      	movs	r3, #2
 800281e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002822:	fa93 f3a3 	rbit	r3, r3
 8002826:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800282a:	fab3 f383 	clz	r3, r3
 800282e:	b2db      	uxtb	r3, r3
 8002830:	095b      	lsrs	r3, r3, #5
 8002832:	b2db      	uxtb	r3, r3
 8002834:	f043 0301 	orr.w	r3, r3, #1
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b01      	cmp	r3, #1
 800283c:	d102      	bne.n	8002844 <HAL_RCC_ClockConfig+0x1a0>
 800283e:	4b31      	ldr	r3, [pc, #196]	; (8002904 <HAL_RCC_ClockConfig+0x260>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	e00d      	b.n	8002860 <HAL_RCC_ClockConfig+0x1bc>
 8002844:	2302      	movs	r3, #2
 8002846:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800284a:	fa93 f3a3 	rbit	r3, r3
 800284e:	627b      	str	r3, [r7, #36]	; 0x24
 8002850:	2302      	movs	r3, #2
 8002852:	623b      	str	r3, [r7, #32]
 8002854:	6a3b      	ldr	r3, [r7, #32]
 8002856:	fa93 f3a3 	rbit	r3, r3
 800285a:	61fb      	str	r3, [r7, #28]
 800285c:	4b29      	ldr	r3, [pc, #164]	; (8002904 <HAL_RCC_ClockConfig+0x260>)
 800285e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002860:	2202      	movs	r2, #2
 8002862:	61ba      	str	r2, [r7, #24]
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	fa92 f2a2 	rbit	r2, r2
 800286a:	617a      	str	r2, [r7, #20]
  return result;
 800286c:	697a      	ldr	r2, [r7, #20]
 800286e:	fab2 f282 	clz	r2, r2
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	f042 0220 	orr.w	r2, r2, #32
 8002878:	b2d2      	uxtb	r2, r2
 800287a:	f002 021f 	and.w	r2, r2, #31
 800287e:	2101      	movs	r1, #1
 8002880:	fa01 f202 	lsl.w	r2, r1, r2
 8002884:	4013      	ands	r3, r2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e079      	b.n	8002982 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800288e:	4b1d      	ldr	r3, [pc, #116]	; (8002904 <HAL_RCC_ClockConfig+0x260>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f023 0203 	bic.w	r2, r3, #3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	491a      	ldr	r1, [pc, #104]	; (8002904 <HAL_RCC_ClockConfig+0x260>)
 800289c:	4313      	orrs	r3, r2
 800289e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028a0:	f7fe fa1a 	bl	8000cd8 <HAL_GetTick>
 80028a4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a6:	e00a      	b.n	80028be <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028a8:	f7fe fa16 	bl	8000cd8 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e061      	b.n	8002982 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028be:	4b11      	ldr	r3, [pc, #68]	; (8002904 <HAL_RCC_ClockConfig+0x260>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f003 020c 	and.w	r2, r3, #12
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d1eb      	bne.n	80028a8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028d0:	4b0b      	ldr	r3, [pc, #44]	; (8002900 <HAL_RCC_ClockConfig+0x25c>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d214      	bcs.n	8002908 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028de:	4b08      	ldr	r3, [pc, #32]	; (8002900 <HAL_RCC_ClockConfig+0x25c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f023 0207 	bic.w	r2, r3, #7
 80028e6:	4906      	ldr	r1, [pc, #24]	; (8002900 <HAL_RCC_ClockConfig+0x25c>)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ee:	4b04      	ldr	r3, [pc, #16]	; (8002900 <HAL_RCC_ClockConfig+0x25c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d005      	beq.n	8002908 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e040      	b.n	8002982 <HAL_RCC_ClockConfig+0x2de>
 8002900:	40022000 	.word	0x40022000
 8002904:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0304 	and.w	r3, r3, #4
 8002910:	2b00      	cmp	r3, #0
 8002912:	d008      	beq.n	8002926 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002914:	4b1d      	ldr	r3, [pc, #116]	; (800298c <HAL_RCC_ClockConfig+0x2e8>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	491a      	ldr	r1, [pc, #104]	; (800298c <HAL_RCC_ClockConfig+0x2e8>)
 8002922:	4313      	orrs	r3, r2
 8002924:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0308 	and.w	r3, r3, #8
 800292e:	2b00      	cmp	r3, #0
 8002930:	d009      	beq.n	8002946 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002932:	4b16      	ldr	r3, [pc, #88]	; (800298c <HAL_RCC_ClockConfig+0x2e8>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	4912      	ldr	r1, [pc, #72]	; (800298c <HAL_RCC_ClockConfig+0x2e8>)
 8002942:	4313      	orrs	r3, r2
 8002944:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002946:	f000 f829 	bl	800299c <HAL_RCC_GetSysClockFreq>
 800294a:	4601      	mov	r1, r0
 800294c:	4b0f      	ldr	r3, [pc, #60]	; (800298c <HAL_RCC_ClockConfig+0x2e8>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002954:	22f0      	movs	r2, #240	; 0xf0
 8002956:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	fa92 f2a2 	rbit	r2, r2
 800295e:	60fa      	str	r2, [r7, #12]
  return result;
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	fab2 f282 	clz	r2, r2
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	40d3      	lsrs	r3, r2
 800296a:	4a09      	ldr	r2, [pc, #36]	; (8002990 <HAL_RCC_ClockConfig+0x2ec>)
 800296c:	5cd3      	ldrb	r3, [r2, r3]
 800296e:	fa21 f303 	lsr.w	r3, r1, r3
 8002972:	4a08      	ldr	r2, [pc, #32]	; (8002994 <HAL_RCC_ClockConfig+0x2f0>)
 8002974:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002976:	4b08      	ldr	r3, [pc, #32]	; (8002998 <HAL_RCC_ClockConfig+0x2f4>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f7fe f968 	bl	8000c50 <HAL_InitTick>
  
  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3778      	adds	r7, #120	; 0x78
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	40021000 	.word	0x40021000
 8002990:	08004354 	.word	0x08004354
 8002994:	20000004 	.word	0x20000004
 8002998:	20000008 	.word	0x20000008

0800299c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800299c:	b480      	push	{r7}
 800299e:	b08b      	sub	sp, #44	; 0x2c
 80029a0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	61fb      	str	r3, [r7, #28]
 80029a6:	2300      	movs	r3, #0
 80029a8:	61bb      	str	r3, [r7, #24]
 80029aa:	2300      	movs	r3, #0
 80029ac:	627b      	str	r3, [r7, #36]	; 0x24
 80029ae:	2300      	movs	r3, #0
 80029b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80029b6:	4b29      	ldr	r3, [pc, #164]	; (8002a5c <HAL_RCC_GetSysClockFreq+0xc0>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	f003 030c 	and.w	r3, r3, #12
 80029c2:	2b04      	cmp	r3, #4
 80029c4:	d002      	beq.n	80029cc <HAL_RCC_GetSysClockFreq+0x30>
 80029c6:	2b08      	cmp	r3, #8
 80029c8:	d003      	beq.n	80029d2 <HAL_RCC_GetSysClockFreq+0x36>
 80029ca:	e03c      	b.n	8002a46 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029cc:	4b24      	ldr	r3, [pc, #144]	; (8002a60 <HAL_RCC_GetSysClockFreq+0xc4>)
 80029ce:	623b      	str	r3, [r7, #32]
      break;
 80029d0:	e03c      	b.n	8002a4c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80029d8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80029dc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029de:	68ba      	ldr	r2, [r7, #8]
 80029e0:	fa92 f2a2 	rbit	r2, r2
 80029e4:	607a      	str	r2, [r7, #4]
  return result;
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	fab2 f282 	clz	r2, r2
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	40d3      	lsrs	r3, r2
 80029f0:	4a1c      	ldr	r2, [pc, #112]	; (8002a64 <HAL_RCC_GetSysClockFreq+0xc8>)
 80029f2:	5cd3      	ldrb	r3, [r2, r3]
 80029f4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80029f6:	4b19      	ldr	r3, [pc, #100]	; (8002a5c <HAL_RCC_GetSysClockFreq+0xc0>)
 80029f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fa:	f003 030f 	and.w	r3, r3, #15
 80029fe:	220f      	movs	r2, #15
 8002a00:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	fa92 f2a2 	rbit	r2, r2
 8002a08:	60fa      	str	r2, [r7, #12]
  return result;
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	fab2 f282 	clz	r2, r2
 8002a10:	b2d2      	uxtb	r2, r2
 8002a12:	40d3      	lsrs	r3, r2
 8002a14:	4a14      	ldr	r2, [pc, #80]	; (8002a68 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002a16:	5cd3      	ldrb	r3, [r2, r3]
 8002a18:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d008      	beq.n	8002a36 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a24:	4a0e      	ldr	r2, [pc, #56]	; (8002a60 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	fb02 f303 	mul.w	r3, r2, r3
 8002a32:	627b      	str	r3, [r7, #36]	; 0x24
 8002a34:	e004      	b.n	8002a40 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	4a0c      	ldr	r2, [pc, #48]	; (8002a6c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a3a:	fb02 f303 	mul.w	r3, r2, r3
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	623b      	str	r3, [r7, #32]
      break;
 8002a44:	e002      	b.n	8002a4c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a46:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a48:	623b      	str	r3, [r7, #32]
      break;
 8002a4a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a4c:	6a3b      	ldr	r3, [r7, #32]
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	372c      	adds	r7, #44	; 0x2c
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	007a1200 	.word	0x007a1200
 8002a64:	08004364 	.word	0x08004364
 8002a68:	08004374 	.word	0x08004374
 8002a6c:	003d0900 	.word	0x003d0900

08002a70 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b092      	sub	sp, #72	; 0x48
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002a80:	2300      	movs	r3, #0
 8002a82:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 80d4 	beq.w	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a94:	4b4e      	ldr	r3, [pc, #312]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a96:	69db      	ldr	r3, [r3, #28]
 8002a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10e      	bne.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aa0:	4b4b      	ldr	r3, [pc, #300]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aa2:	69db      	ldr	r3, [r3, #28]
 8002aa4:	4a4a      	ldr	r2, [pc, #296]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aaa:	61d3      	str	r3, [r2, #28]
 8002aac:	4b48      	ldr	r3, [pc, #288]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aae:	69db      	ldr	r3, [r3, #28]
 8002ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab4:	60bb      	str	r3, [r7, #8]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002abe:	4b45      	ldr	r3, [pc, #276]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d118      	bne.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aca:	4b42      	ldr	r3, [pc, #264]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a41      	ldr	r2, [pc, #260]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ad6:	f7fe f8ff 	bl	8000cd8 <HAL_GetTick>
 8002ada:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002adc:	e008      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ade:	f7fe f8fb 	bl	8000cd8 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b64      	cmp	r3, #100	; 0x64
 8002aea:	d901      	bls.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e169      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af0:	4b38      	ldr	r3, [pc, #224]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0f0      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002afc:	4b34      	ldr	r3, [pc, #208]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b04:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 8084 	beq.w	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d07c      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b1c:	4b2c      	ldr	r3, [pc, #176]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b2a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b2e:	fa93 f3a3 	rbit	r3, r3
 8002b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b36:	fab3 f383 	clz	r3, r3
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	4b26      	ldr	r3, [pc, #152]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b40:	4413      	add	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	461a      	mov	r2, r3
 8002b46:	2301      	movs	r3, #1
 8002b48:	6013      	str	r3, [r2, #0]
 8002b4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b4e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b52:	fa93 f3a3 	rbit	r3, r3
 8002b56:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b5a:	fab3 f383 	clz	r3, r3
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	461a      	mov	r2, r3
 8002b62:	4b1d      	ldr	r3, [pc, #116]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b64:	4413      	add	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	461a      	mov	r2, r3
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b6e:	4a18      	ldr	r2, [pc, #96]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b72:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d04b      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7e:	f7fe f8ab 	bl	8000cd8 <HAL_GetTick>
 8002b82:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b84:	e00a      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b86:	f7fe f8a7 	bl	8000cd8 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d901      	bls.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e113      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba2:	fa93 f3a3 	rbit	r3, r3
 8002ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ba8:	2302      	movs	r3, #2
 8002baa:	623b      	str	r3, [r7, #32]
 8002bac:	6a3b      	ldr	r3, [r7, #32]
 8002bae:	fa93 f3a3 	rbit	r3, r3
 8002bb2:	61fb      	str	r3, [r7, #28]
  return result;
 8002bb4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb6:	fab3 f383 	clz	r3, r3
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	095b      	lsrs	r3, r3, #5
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	f043 0302 	orr.w	r3, r3, #2
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d108      	bne.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002bca:	4b01      	ldr	r3, [pc, #4]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	e00d      	b.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	40007000 	.word	0x40007000
 8002bd8:	10908100 	.word	0x10908100
 8002bdc:	2302      	movs	r3, #2
 8002bde:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	fa93 f3a3 	rbit	r3, r3
 8002be6:	617b      	str	r3, [r7, #20]
 8002be8:	4b78      	ldr	r3, [pc, #480]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bec:	2202      	movs	r2, #2
 8002bee:	613a      	str	r2, [r7, #16]
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	fa92 f2a2 	rbit	r2, r2
 8002bf6:	60fa      	str	r2, [r7, #12]
  return result;
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	fab2 f282 	clz	r2, r2
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c04:	b2d2      	uxtb	r2, r2
 8002c06:	f002 021f 	and.w	r2, r2, #31
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c10:	4013      	ands	r3, r2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0b7      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002c16:	4b6d      	ldr	r3, [pc, #436]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	496a      	ldr	r1, [pc, #424]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c28:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d105      	bne.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c30:	4b66      	ldr	r3, [pc, #408]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c32:	69db      	ldr	r3, [r3, #28]
 8002c34:	4a65      	ldr	r2, [pc, #404]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c3a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d008      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c48:	4b60      	ldr	r3, [pc, #384]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4c:	f023 0203 	bic.w	r2, r3, #3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	495d      	ldr	r1, [pc, #372]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d008      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c66:	4b59      	ldr	r3, [pc, #356]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	4956      	ldr	r1, [pc, #344]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0304 	and.w	r3, r3, #4
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d008      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c84:	4b51      	ldr	r3, [pc, #324]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c88:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	494e      	ldr	r1, [pc, #312]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0320 	and.w	r3, r3, #32
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d008      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ca2:	4b4a      	ldr	r3, [pc, #296]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	f023 0210 	bic.w	r2, r3, #16
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	4947      	ldr	r1, [pc, #284]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d008      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002cc0:	4b42      	ldr	r3, [pc, #264]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ccc:	493f      	ldr	r1, [pc, #252]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d008      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cde:	4b3b      	ldr	r3, [pc, #236]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	f023 0220 	bic.w	r2, r3, #32
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	4938      	ldr	r1, [pc, #224]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0308 	and.w	r3, r3, #8
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d008      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cfc:	4b33      	ldr	r3, [pc, #204]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	4930      	ldr	r1, [pc, #192]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0310 	and.w	r3, r3, #16
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d008      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d1a:	4b2c      	ldr	r3, [pc, #176]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	4929      	ldr	r1, [pc, #164]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d008      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d38:	4b24      	ldr	r3, [pc, #144]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d44:	4921      	ldr	r1, [pc, #132]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d008      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002d56:	4b1d      	ldr	r3, [pc, #116]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	491a      	ldr	r1, [pc, #104]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d008      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002d74:	4b15      	ldr	r3, [pc, #84]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d78:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d80:	4912      	ldr	r1, [pc, #72]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d008      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002d92:	4b0e      	ldr	r3, [pc, #56]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	490b      	ldr	r1, [pc, #44]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d008      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002db0:	4b06      	ldr	r3, [pc, #24]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dbc:	4903      	ldr	r1, [pc, #12]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3748      	adds	r7, #72	; 0x48
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	40021000 	.word	0x40021000

08002dd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e09d      	b.n	8002f1e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d108      	bne.n	8002dfc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002df2:	d009      	beq.n	8002e08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	61da      	str	r2, [r3, #28]
 8002dfa:	e005      	b.n	8002e08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d106      	bne.n	8002e28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7fd fd9a 	bl	800095c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e3e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e48:	d902      	bls.n	8002e50 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60fb      	str	r3, [r7, #12]
 8002e4e:	e002      	b.n	8002e56 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002e50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e54:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002e5e:	d007      	beq.n	8002e70 <HAL_SPI_Init+0xa0>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e68:	d002      	beq.n	8002e70 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002e80:	431a      	orrs	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	431a      	orrs	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ea8:	431a      	orrs	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb2:	ea42 0103 	orr.w	r1, r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	0c1b      	lsrs	r3, r3, #16
 8002ecc:	f003 0204 	and.w	r2, r3, #4
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed4:	f003 0310 	and.w	r3, r3, #16
 8002ed8:	431a      	orrs	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ede:	f003 0308 	and.w	r3, r3, #8
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002eec:	ea42 0103 	orr.w	r1, r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	69da      	ldr	r2, [r3, #28]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f0c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b082      	sub	sp, #8
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e049      	b.n	8002fcc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d106      	bne.n	8002f52 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f7fd fd47 	bl	80009e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2202      	movs	r2, #2
 8002f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	3304      	adds	r3, #4
 8002f62:	4619      	mov	r1, r3
 8002f64:	4610      	mov	r0, r2
 8002f66:	f000 fcbd 	bl	80038e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3708      	adds	r7, #8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e049      	b.n	800307a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d106      	bne.n	8003000 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 f841 	bl	8003082 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2202      	movs	r2, #2
 8003004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	3304      	adds	r3, #4
 8003010:	4619      	mov	r1, r3
 8003012:	4610      	mov	r0, r2
 8003014:	f000 fc66 	bl	80038e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003082:	b480      	push	{r7}
 8003084:	b083      	sub	sp, #12
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
	...

08003098 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d109      	bne.n	80030bc <HAL_TIM_PWM_Start+0x24>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	bf14      	ite	ne
 80030b4:	2301      	movne	r3, #1
 80030b6:	2300      	moveq	r3, #0
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	e03c      	b.n	8003136 <HAL_TIM_PWM_Start+0x9e>
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	2b04      	cmp	r3, #4
 80030c0:	d109      	bne.n	80030d6 <HAL_TIM_PWM_Start+0x3e>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	bf14      	ite	ne
 80030ce:	2301      	movne	r3, #1
 80030d0:	2300      	moveq	r3, #0
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	e02f      	b.n	8003136 <HAL_TIM_PWM_Start+0x9e>
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	2b08      	cmp	r3, #8
 80030da:	d109      	bne.n	80030f0 <HAL_TIM_PWM_Start+0x58>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	bf14      	ite	ne
 80030e8:	2301      	movne	r3, #1
 80030ea:	2300      	moveq	r3, #0
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	e022      	b.n	8003136 <HAL_TIM_PWM_Start+0x9e>
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	2b0c      	cmp	r3, #12
 80030f4:	d109      	bne.n	800310a <HAL_TIM_PWM_Start+0x72>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b01      	cmp	r3, #1
 8003100:	bf14      	ite	ne
 8003102:	2301      	movne	r3, #1
 8003104:	2300      	moveq	r3, #0
 8003106:	b2db      	uxtb	r3, r3
 8003108:	e015      	b.n	8003136 <HAL_TIM_PWM_Start+0x9e>
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	2b10      	cmp	r3, #16
 800310e:	d109      	bne.n	8003124 <HAL_TIM_PWM_Start+0x8c>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b01      	cmp	r3, #1
 800311a:	bf14      	ite	ne
 800311c:	2301      	movne	r3, #1
 800311e:	2300      	moveq	r3, #0
 8003120:	b2db      	uxtb	r3, r3
 8003122:	e008      	b.n	8003136 <HAL_TIM_PWM_Start+0x9e>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b01      	cmp	r3, #1
 800312e:	bf14      	ite	ne
 8003130:	2301      	movne	r3, #1
 8003132:	2300      	moveq	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e097      	b.n	800326e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d104      	bne.n	800314e <HAL_TIM_PWM_Start+0xb6>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2202      	movs	r2, #2
 8003148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800314c:	e023      	b.n	8003196 <HAL_TIM_PWM_Start+0xfe>
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	2b04      	cmp	r3, #4
 8003152:	d104      	bne.n	800315e <HAL_TIM_PWM_Start+0xc6>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2202      	movs	r2, #2
 8003158:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800315c:	e01b      	b.n	8003196 <HAL_TIM_PWM_Start+0xfe>
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	2b08      	cmp	r3, #8
 8003162:	d104      	bne.n	800316e <HAL_TIM_PWM_Start+0xd6>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2202      	movs	r2, #2
 8003168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800316c:	e013      	b.n	8003196 <HAL_TIM_PWM_Start+0xfe>
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	2b0c      	cmp	r3, #12
 8003172:	d104      	bne.n	800317e <HAL_TIM_PWM_Start+0xe6>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2202      	movs	r2, #2
 8003178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800317c:	e00b      	b.n	8003196 <HAL_TIM_PWM_Start+0xfe>
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	2b10      	cmp	r3, #16
 8003182:	d104      	bne.n	800318e <HAL_TIM_PWM_Start+0xf6>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2202      	movs	r2, #2
 8003188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800318c:	e003      	b.n	8003196 <HAL_TIM_PWM_Start+0xfe>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2202      	movs	r2, #2
 8003192:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2201      	movs	r2, #1
 800319c:	6839      	ldr	r1, [r7, #0]
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 ffa0 	bl	80040e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a33      	ldr	r2, [pc, #204]	; (8003278 <HAL_TIM_PWM_Start+0x1e0>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d013      	beq.n	80031d6 <HAL_TIM_PWM_Start+0x13e>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a32      	ldr	r2, [pc, #200]	; (800327c <HAL_TIM_PWM_Start+0x1e4>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d00e      	beq.n	80031d6 <HAL_TIM_PWM_Start+0x13e>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a30      	ldr	r2, [pc, #192]	; (8003280 <HAL_TIM_PWM_Start+0x1e8>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d009      	beq.n	80031d6 <HAL_TIM_PWM_Start+0x13e>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a2f      	ldr	r2, [pc, #188]	; (8003284 <HAL_TIM_PWM_Start+0x1ec>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d004      	beq.n	80031d6 <HAL_TIM_PWM_Start+0x13e>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a2d      	ldr	r2, [pc, #180]	; (8003288 <HAL_TIM_PWM_Start+0x1f0>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d101      	bne.n	80031da <HAL_TIM_PWM_Start+0x142>
 80031d6:	2301      	movs	r3, #1
 80031d8:	e000      	b.n	80031dc <HAL_TIM_PWM_Start+0x144>
 80031da:	2300      	movs	r3, #0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d007      	beq.n	80031f0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031ee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a20      	ldr	r2, [pc, #128]	; (8003278 <HAL_TIM_PWM_Start+0x1e0>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d018      	beq.n	800322c <HAL_TIM_PWM_Start+0x194>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003202:	d013      	beq.n	800322c <HAL_TIM_PWM_Start+0x194>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a20      	ldr	r2, [pc, #128]	; (800328c <HAL_TIM_PWM_Start+0x1f4>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d00e      	beq.n	800322c <HAL_TIM_PWM_Start+0x194>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a1f      	ldr	r2, [pc, #124]	; (8003290 <HAL_TIM_PWM_Start+0x1f8>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d009      	beq.n	800322c <HAL_TIM_PWM_Start+0x194>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a17      	ldr	r2, [pc, #92]	; (800327c <HAL_TIM_PWM_Start+0x1e4>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d004      	beq.n	800322c <HAL_TIM_PWM_Start+0x194>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a16      	ldr	r2, [pc, #88]	; (8003280 <HAL_TIM_PWM_Start+0x1e8>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d115      	bne.n	8003258 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	689a      	ldr	r2, [r3, #8]
 8003232:	4b18      	ldr	r3, [pc, #96]	; (8003294 <HAL_TIM_PWM_Start+0x1fc>)
 8003234:	4013      	ands	r3, r2
 8003236:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2b06      	cmp	r3, #6
 800323c:	d015      	beq.n	800326a <HAL_TIM_PWM_Start+0x1d2>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003244:	d011      	beq.n	800326a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f042 0201 	orr.w	r2, r2, #1
 8003254:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003256:	e008      	b.n	800326a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 0201 	orr.w	r2, r2, #1
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	e000      	b.n	800326c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800326a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	40012c00 	.word	0x40012c00
 800327c:	40013400 	.word	0x40013400
 8003280:	40014000 	.word	0x40014000
 8003284:	40014400 	.word	0x40014400
 8003288:	40014800 	.word	0x40014800
 800328c:	40000400 	.word	0x40000400
 8003290:	40000800 	.word	0x40000800
 8003294:	00010007 	.word	0x00010007

08003298 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d122      	bne.n	80032f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d11b      	bne.n	80032f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f06f 0202 	mvn.w	r2, #2
 80032c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	f003 0303 	and.w	r3, r3, #3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 fae3 	bl	80038a6 <HAL_TIM_IC_CaptureCallback>
 80032e0:	e005      	b.n	80032ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 fad5 	bl	8003892 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 fae6 	bl	80038ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	f003 0304 	and.w	r3, r3, #4
 80032fe:	2b04      	cmp	r3, #4
 8003300:	d122      	bne.n	8003348 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	2b04      	cmp	r3, #4
 800330e:	d11b      	bne.n	8003348 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f06f 0204 	mvn.w	r2, #4
 8003318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2202      	movs	r2, #2
 800331e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 fab9 	bl	80038a6 <HAL_TIM_IC_CaptureCallback>
 8003334:	e005      	b.n	8003342 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 faab 	bl	8003892 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 fabc 	bl	80038ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	f003 0308 	and.w	r3, r3, #8
 8003352:	2b08      	cmp	r3, #8
 8003354:	d122      	bne.n	800339c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	f003 0308 	and.w	r3, r3, #8
 8003360:	2b08      	cmp	r3, #8
 8003362:	d11b      	bne.n	800339c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f06f 0208 	mvn.w	r2, #8
 800336c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2204      	movs	r2, #4
 8003372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	f003 0303 	and.w	r3, r3, #3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 fa8f 	bl	80038a6 <HAL_TIM_IC_CaptureCallback>
 8003388:	e005      	b.n	8003396 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 fa81 	bl	8003892 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 fa92 	bl	80038ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	f003 0310 	and.w	r3, r3, #16
 80033a6:	2b10      	cmp	r3, #16
 80033a8:	d122      	bne.n	80033f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	f003 0310 	and.w	r3, r3, #16
 80033b4:	2b10      	cmp	r3, #16
 80033b6:	d11b      	bne.n	80033f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f06f 0210 	mvn.w	r2, #16
 80033c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2208      	movs	r2, #8
 80033c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 fa65 	bl	80038a6 <HAL_TIM_IC_CaptureCallback>
 80033dc:	e005      	b.n	80033ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 fa57 	bl	8003892 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 fa68 	bl	80038ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d10e      	bne.n	800341c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b01      	cmp	r3, #1
 800340a:	d107      	bne.n	800341c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f06f 0201 	mvn.w	r2, #1
 8003414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7fd fa0c 	bl	8000834 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003426:	2b80      	cmp	r3, #128	; 0x80
 8003428:	d10e      	bne.n	8003448 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003434:	2b80      	cmp	r3, #128	; 0x80
 8003436:	d107      	bne.n	8003448 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 fefe 	bl	8004244 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003456:	d10e      	bne.n	8003476 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003462:	2b80      	cmp	r3, #128	; 0x80
 8003464:	d107      	bne.n	8003476 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800346e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 fef1 	bl	8004258 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003480:	2b40      	cmp	r3, #64	; 0x40
 8003482:	d10e      	bne.n	80034a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348e:	2b40      	cmp	r3, #64	; 0x40
 8003490:	d107      	bne.n	80034a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800349a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 fa16 	bl	80038ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	f003 0320 	and.w	r3, r3, #32
 80034ac:	2b20      	cmp	r3, #32
 80034ae:	d10e      	bne.n	80034ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	f003 0320 	and.w	r3, r3, #32
 80034ba:	2b20      	cmp	r3, #32
 80034bc:	d107      	bne.n	80034ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f06f 0220 	mvn.w	r2, #32
 80034c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 feb1 	bl	8004230 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034ce:	bf00      	nop
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
	...

080034d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034e4:	2300      	movs	r3, #0
 80034e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d101      	bne.n	80034f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80034f2:	2302      	movs	r3, #2
 80034f4:	e0ff      	b.n	80036f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2b14      	cmp	r3, #20
 8003502:	f200 80f0 	bhi.w	80036e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003506:	a201      	add	r2, pc, #4	; (adr r2, 800350c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800350c:	08003561 	.word	0x08003561
 8003510:	080036e7 	.word	0x080036e7
 8003514:	080036e7 	.word	0x080036e7
 8003518:	080036e7 	.word	0x080036e7
 800351c:	080035a1 	.word	0x080035a1
 8003520:	080036e7 	.word	0x080036e7
 8003524:	080036e7 	.word	0x080036e7
 8003528:	080036e7 	.word	0x080036e7
 800352c:	080035e3 	.word	0x080035e3
 8003530:	080036e7 	.word	0x080036e7
 8003534:	080036e7 	.word	0x080036e7
 8003538:	080036e7 	.word	0x080036e7
 800353c:	08003623 	.word	0x08003623
 8003540:	080036e7 	.word	0x080036e7
 8003544:	080036e7 	.word	0x080036e7
 8003548:	080036e7 	.word	0x080036e7
 800354c:	08003665 	.word	0x08003665
 8003550:	080036e7 	.word	0x080036e7
 8003554:	080036e7 	.word	0x080036e7
 8003558:	080036e7 	.word	0x080036e7
 800355c:	080036a5 	.word	0x080036a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68b9      	ldr	r1, [r7, #8]
 8003566:	4618      	mov	r0, r3
 8003568:	f000 fa4c 	bl	8003a04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	699a      	ldr	r2, [r3, #24]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f042 0208 	orr.w	r2, r2, #8
 800357a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	699a      	ldr	r2, [r3, #24]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f022 0204 	bic.w	r2, r2, #4
 800358a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6999      	ldr	r1, [r3, #24]
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	691a      	ldr	r2, [r3, #16]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	619a      	str	r2, [r3, #24]
      break;
 800359e:	e0a5      	b.n	80036ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68b9      	ldr	r1, [r7, #8]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 fabc 	bl	8003b24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	699a      	ldr	r2, [r3, #24]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	699a      	ldr	r2, [r3, #24]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6999      	ldr	r1, [r3, #24]
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	021a      	lsls	r2, r3, #8
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	430a      	orrs	r2, r1
 80035de:	619a      	str	r2, [r3, #24]
      break;
 80035e0:	e084      	b.n	80036ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68b9      	ldr	r1, [r7, #8]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f000 fb25 	bl	8003c38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	69da      	ldr	r2, [r3, #28]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f042 0208 	orr.w	r2, r2, #8
 80035fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	69da      	ldr	r2, [r3, #28]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 0204 	bic.w	r2, r2, #4
 800360c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	69d9      	ldr	r1, [r3, #28]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	691a      	ldr	r2, [r3, #16]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	430a      	orrs	r2, r1
 800361e:	61da      	str	r2, [r3, #28]
      break;
 8003620:	e064      	b.n	80036ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68b9      	ldr	r1, [r7, #8]
 8003628:	4618      	mov	r0, r3
 800362a:	f000 fb8d 	bl	8003d48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	69da      	ldr	r2, [r3, #28]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800363c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	69da      	ldr	r2, [r3, #28]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800364c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	69d9      	ldr	r1, [r3, #28]
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	021a      	lsls	r2, r3, #8
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	430a      	orrs	r2, r1
 8003660:	61da      	str	r2, [r3, #28]
      break;
 8003662:	e043      	b.n	80036ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68b9      	ldr	r1, [r7, #8]
 800366a:	4618      	mov	r0, r3
 800366c:	f000 fbd6 	bl	8003e1c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 0208 	orr.w	r2, r2, #8
 800367e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 0204 	bic.w	r2, r2, #4
 800368e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	691a      	ldr	r2, [r3, #16]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	430a      	orrs	r2, r1
 80036a0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80036a2:	e023      	b.n	80036ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68b9      	ldr	r1, [r7, #8]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f000 fc1a 	bl	8003ee4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	021a      	lsls	r2, r3, #8
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80036e4:	e002      	b.n	80036ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	75fb      	strb	r3, [r7, #23]
      break;
 80036ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3718      	adds	r7, #24
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop

08003700 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800370a:	2300      	movs	r3, #0
 800370c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003714:	2b01      	cmp	r3, #1
 8003716:	d101      	bne.n	800371c <HAL_TIM_ConfigClockSource+0x1c>
 8003718:	2302      	movs	r3, #2
 800371a:	e0b6      	b.n	800388a <HAL_TIM_ConfigClockSource+0x18a>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2202      	movs	r2, #2
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800373a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800373e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003746:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003758:	d03e      	beq.n	80037d8 <HAL_TIM_ConfigClockSource+0xd8>
 800375a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800375e:	f200 8087 	bhi.w	8003870 <HAL_TIM_ConfigClockSource+0x170>
 8003762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003766:	f000 8086 	beq.w	8003876 <HAL_TIM_ConfigClockSource+0x176>
 800376a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800376e:	d87f      	bhi.n	8003870 <HAL_TIM_ConfigClockSource+0x170>
 8003770:	2b70      	cmp	r3, #112	; 0x70
 8003772:	d01a      	beq.n	80037aa <HAL_TIM_ConfigClockSource+0xaa>
 8003774:	2b70      	cmp	r3, #112	; 0x70
 8003776:	d87b      	bhi.n	8003870 <HAL_TIM_ConfigClockSource+0x170>
 8003778:	2b60      	cmp	r3, #96	; 0x60
 800377a:	d050      	beq.n	800381e <HAL_TIM_ConfigClockSource+0x11e>
 800377c:	2b60      	cmp	r3, #96	; 0x60
 800377e:	d877      	bhi.n	8003870 <HAL_TIM_ConfigClockSource+0x170>
 8003780:	2b50      	cmp	r3, #80	; 0x50
 8003782:	d03c      	beq.n	80037fe <HAL_TIM_ConfigClockSource+0xfe>
 8003784:	2b50      	cmp	r3, #80	; 0x50
 8003786:	d873      	bhi.n	8003870 <HAL_TIM_ConfigClockSource+0x170>
 8003788:	2b40      	cmp	r3, #64	; 0x40
 800378a:	d058      	beq.n	800383e <HAL_TIM_ConfigClockSource+0x13e>
 800378c:	2b40      	cmp	r3, #64	; 0x40
 800378e:	d86f      	bhi.n	8003870 <HAL_TIM_ConfigClockSource+0x170>
 8003790:	2b30      	cmp	r3, #48	; 0x30
 8003792:	d064      	beq.n	800385e <HAL_TIM_ConfigClockSource+0x15e>
 8003794:	2b30      	cmp	r3, #48	; 0x30
 8003796:	d86b      	bhi.n	8003870 <HAL_TIM_ConfigClockSource+0x170>
 8003798:	2b20      	cmp	r3, #32
 800379a:	d060      	beq.n	800385e <HAL_TIM_ConfigClockSource+0x15e>
 800379c:	2b20      	cmp	r3, #32
 800379e:	d867      	bhi.n	8003870 <HAL_TIM_ConfigClockSource+0x170>
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d05c      	beq.n	800385e <HAL_TIM_ConfigClockSource+0x15e>
 80037a4:	2b10      	cmp	r3, #16
 80037a6:	d05a      	beq.n	800385e <HAL_TIM_ConfigClockSource+0x15e>
 80037a8:	e062      	b.n	8003870 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6818      	ldr	r0, [r3, #0]
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	6899      	ldr	r1, [r3, #8]
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	f000 fc73 	bl	80040a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68ba      	ldr	r2, [r7, #8]
 80037d4:	609a      	str	r2, [r3, #8]
      break;
 80037d6:	e04f      	b.n	8003878 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6818      	ldr	r0, [r3, #0]
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	6899      	ldr	r1, [r3, #8]
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	f000 fc5c 	bl	80040a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689a      	ldr	r2, [r3, #8]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037fa:	609a      	str	r2, [r3, #8]
      break;
 80037fc:	e03c      	b.n	8003878 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6818      	ldr	r0, [r3, #0]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	6859      	ldr	r1, [r3, #4]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	461a      	mov	r2, r3
 800380c:	f000 fbd0 	bl	8003fb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2150      	movs	r1, #80	; 0x50
 8003816:	4618      	mov	r0, r3
 8003818:	f000 fc29 	bl	800406e <TIM_ITRx_SetConfig>
      break;
 800381c:	e02c      	b.n	8003878 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6818      	ldr	r0, [r3, #0]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	6859      	ldr	r1, [r3, #4]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	461a      	mov	r2, r3
 800382c:	f000 fbef 	bl	800400e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2160      	movs	r1, #96	; 0x60
 8003836:	4618      	mov	r0, r3
 8003838:	f000 fc19 	bl	800406e <TIM_ITRx_SetConfig>
      break;
 800383c:	e01c      	b.n	8003878 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6818      	ldr	r0, [r3, #0]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	6859      	ldr	r1, [r3, #4]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	461a      	mov	r2, r3
 800384c:	f000 fbb0 	bl	8003fb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2140      	movs	r1, #64	; 0x40
 8003856:	4618      	mov	r0, r3
 8003858:	f000 fc09 	bl	800406e <TIM_ITRx_SetConfig>
      break;
 800385c:	e00c      	b.n	8003878 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4619      	mov	r1, r3
 8003868:	4610      	mov	r0, r2
 800386a:	f000 fc00 	bl	800406e <TIM_ITRx_SetConfig>
      break;
 800386e:	e003      	b.n	8003878 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	73fb      	strb	r3, [r7, #15]
      break;
 8003874:	e000      	b.n	8003878 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003876:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003888:	7bfb      	ldrb	r3, [r7, #15]
}
 800388a:	4618      	mov	r0, r3
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003892:	b480      	push	{r7}
 8003894:	b083      	sub	sp, #12
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800389a:	bf00      	nop
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr

080038a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b083      	sub	sp, #12
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038ae:	bf00      	nop
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr

080038ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038ba:	b480      	push	{r7}
 80038bc:	b083      	sub	sp, #12
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038c2:	bf00      	nop
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr

080038ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b083      	sub	sp, #12
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038d6:	bf00      	nop
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
	...

080038e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a3c      	ldr	r2, [pc, #240]	; (80039e8 <TIM_Base_SetConfig+0x104>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d00f      	beq.n	800391c <TIM_Base_SetConfig+0x38>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003902:	d00b      	beq.n	800391c <TIM_Base_SetConfig+0x38>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a39      	ldr	r2, [pc, #228]	; (80039ec <TIM_Base_SetConfig+0x108>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d007      	beq.n	800391c <TIM_Base_SetConfig+0x38>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a38      	ldr	r2, [pc, #224]	; (80039f0 <TIM_Base_SetConfig+0x10c>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d003      	beq.n	800391c <TIM_Base_SetConfig+0x38>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a37      	ldr	r2, [pc, #220]	; (80039f4 <TIM_Base_SetConfig+0x110>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d108      	bne.n	800392e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003922:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	4313      	orrs	r3, r2
 800392c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a2d      	ldr	r2, [pc, #180]	; (80039e8 <TIM_Base_SetConfig+0x104>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d01b      	beq.n	800396e <TIM_Base_SetConfig+0x8a>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800393c:	d017      	beq.n	800396e <TIM_Base_SetConfig+0x8a>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a2a      	ldr	r2, [pc, #168]	; (80039ec <TIM_Base_SetConfig+0x108>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d013      	beq.n	800396e <TIM_Base_SetConfig+0x8a>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a29      	ldr	r2, [pc, #164]	; (80039f0 <TIM_Base_SetConfig+0x10c>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d00f      	beq.n	800396e <TIM_Base_SetConfig+0x8a>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a28      	ldr	r2, [pc, #160]	; (80039f4 <TIM_Base_SetConfig+0x110>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d00b      	beq.n	800396e <TIM_Base_SetConfig+0x8a>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a27      	ldr	r2, [pc, #156]	; (80039f8 <TIM_Base_SetConfig+0x114>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d007      	beq.n	800396e <TIM_Base_SetConfig+0x8a>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a26      	ldr	r2, [pc, #152]	; (80039fc <TIM_Base_SetConfig+0x118>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d003      	beq.n	800396e <TIM_Base_SetConfig+0x8a>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a25      	ldr	r2, [pc, #148]	; (8003a00 <TIM_Base_SetConfig+0x11c>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d108      	bne.n	8003980 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003974:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	4313      	orrs	r3, r2
 800397e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	4313      	orrs	r3, r2
 800398c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	689a      	ldr	r2, [r3, #8]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a10      	ldr	r2, [pc, #64]	; (80039e8 <TIM_Base_SetConfig+0x104>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d00f      	beq.n	80039cc <TIM_Base_SetConfig+0xe8>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a11      	ldr	r2, [pc, #68]	; (80039f4 <TIM_Base_SetConfig+0x110>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d00b      	beq.n	80039cc <TIM_Base_SetConfig+0xe8>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a10      	ldr	r2, [pc, #64]	; (80039f8 <TIM_Base_SetConfig+0x114>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d007      	beq.n	80039cc <TIM_Base_SetConfig+0xe8>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a0f      	ldr	r2, [pc, #60]	; (80039fc <TIM_Base_SetConfig+0x118>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d003      	beq.n	80039cc <TIM_Base_SetConfig+0xe8>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a0e      	ldr	r2, [pc, #56]	; (8003a00 <TIM_Base_SetConfig+0x11c>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d103      	bne.n	80039d4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	691a      	ldr	r2, [r3, #16]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	615a      	str	r2, [r3, #20]
}
 80039da:	bf00      	nop
 80039dc:	3714      	adds	r7, #20
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	40012c00 	.word	0x40012c00
 80039ec:	40000400 	.word	0x40000400
 80039f0:	40000800 	.word	0x40000800
 80039f4:	40013400 	.word	0x40013400
 80039f8:	40014000 	.word	0x40014000
 80039fc:	40014400 	.word	0x40014400
 8003a00:	40014800 	.word	0x40014800

08003a04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b087      	sub	sp, #28
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	f023 0201 	bic.w	r2, r3, #1
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f023 0303 	bic.w	r3, r3, #3
 8003a3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	f023 0302 	bic.w	r3, r3, #2
 8003a50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a2c      	ldr	r2, [pc, #176]	; (8003b10 <TIM_OC1_SetConfig+0x10c>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d00f      	beq.n	8003a84 <TIM_OC1_SetConfig+0x80>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a2b      	ldr	r2, [pc, #172]	; (8003b14 <TIM_OC1_SetConfig+0x110>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d00b      	beq.n	8003a84 <TIM_OC1_SetConfig+0x80>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a2a      	ldr	r2, [pc, #168]	; (8003b18 <TIM_OC1_SetConfig+0x114>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d007      	beq.n	8003a84 <TIM_OC1_SetConfig+0x80>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a29      	ldr	r2, [pc, #164]	; (8003b1c <TIM_OC1_SetConfig+0x118>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d003      	beq.n	8003a84 <TIM_OC1_SetConfig+0x80>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a28      	ldr	r2, [pc, #160]	; (8003b20 <TIM_OC1_SetConfig+0x11c>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d10c      	bne.n	8003a9e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	f023 0308 	bic.w	r3, r3, #8
 8003a8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f023 0304 	bic.w	r3, r3, #4
 8003a9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a1b      	ldr	r2, [pc, #108]	; (8003b10 <TIM_OC1_SetConfig+0x10c>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d00f      	beq.n	8003ac6 <TIM_OC1_SetConfig+0xc2>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a1a      	ldr	r2, [pc, #104]	; (8003b14 <TIM_OC1_SetConfig+0x110>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d00b      	beq.n	8003ac6 <TIM_OC1_SetConfig+0xc2>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a19      	ldr	r2, [pc, #100]	; (8003b18 <TIM_OC1_SetConfig+0x114>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d007      	beq.n	8003ac6 <TIM_OC1_SetConfig+0xc2>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a18      	ldr	r2, [pc, #96]	; (8003b1c <TIM_OC1_SetConfig+0x118>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d003      	beq.n	8003ac6 <TIM_OC1_SetConfig+0xc2>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a17      	ldr	r2, [pc, #92]	; (8003b20 <TIM_OC1_SetConfig+0x11c>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d111      	bne.n	8003aea <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003acc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ad4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	621a      	str	r2, [r3, #32]
}
 8003b04:	bf00      	nop
 8003b06:	371c      	adds	r7, #28
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr
 8003b10:	40012c00 	.word	0x40012c00
 8003b14:	40013400 	.word	0x40013400
 8003b18:	40014000 	.word	0x40014000
 8003b1c:	40014400 	.word	0x40014400
 8003b20:	40014800 	.word	0x40014800

08003b24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b087      	sub	sp, #28
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	f023 0210 	bic.w	r2, r3, #16
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	021b      	lsls	r3, r3, #8
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	f023 0320 	bic.w	r3, r3, #32
 8003b72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	011b      	lsls	r3, r3, #4
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a28      	ldr	r2, [pc, #160]	; (8003c24 <TIM_OC2_SetConfig+0x100>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d003      	beq.n	8003b90 <TIM_OC2_SetConfig+0x6c>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a27      	ldr	r2, [pc, #156]	; (8003c28 <TIM_OC2_SetConfig+0x104>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d10d      	bne.n	8003bac <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	011b      	lsls	r3, r3, #4
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003baa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a1d      	ldr	r2, [pc, #116]	; (8003c24 <TIM_OC2_SetConfig+0x100>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d00f      	beq.n	8003bd4 <TIM_OC2_SetConfig+0xb0>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a1c      	ldr	r2, [pc, #112]	; (8003c28 <TIM_OC2_SetConfig+0x104>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d00b      	beq.n	8003bd4 <TIM_OC2_SetConfig+0xb0>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a1b      	ldr	r2, [pc, #108]	; (8003c2c <TIM_OC2_SetConfig+0x108>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d007      	beq.n	8003bd4 <TIM_OC2_SetConfig+0xb0>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a1a      	ldr	r2, [pc, #104]	; (8003c30 <TIM_OC2_SetConfig+0x10c>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d003      	beq.n	8003bd4 <TIM_OC2_SetConfig+0xb0>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a19      	ldr	r2, [pc, #100]	; (8003c34 <TIM_OC2_SetConfig+0x110>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d113      	bne.n	8003bfc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bda:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003be2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	695b      	ldr	r3, [r3, #20]
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685a      	ldr	r2, [r3, #4]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	621a      	str	r2, [r3, #32]
}
 8003c16:	bf00      	nop
 8003c18:	371c      	adds	r7, #28
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	40012c00 	.word	0x40012c00
 8003c28:	40013400 	.word	0x40013400
 8003c2c:	40014000 	.word	0x40014000
 8003c30:	40014400 	.word	0x40014400
 8003c34:	40014800 	.word	0x40014800

08003c38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b087      	sub	sp, #28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f023 0303 	bic.w	r3, r3, #3
 8003c72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	021b      	lsls	r3, r3, #8
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a27      	ldr	r2, [pc, #156]	; (8003d34 <TIM_OC3_SetConfig+0xfc>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d003      	beq.n	8003ca2 <TIM_OC3_SetConfig+0x6a>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a26      	ldr	r2, [pc, #152]	; (8003d38 <TIM_OC3_SetConfig+0x100>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d10d      	bne.n	8003cbe <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ca8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	021b      	lsls	r3, r3, #8
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cbc:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a1c      	ldr	r2, [pc, #112]	; (8003d34 <TIM_OC3_SetConfig+0xfc>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d00f      	beq.n	8003ce6 <TIM_OC3_SetConfig+0xae>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a1b      	ldr	r2, [pc, #108]	; (8003d38 <TIM_OC3_SetConfig+0x100>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d00b      	beq.n	8003ce6 <TIM_OC3_SetConfig+0xae>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a1a      	ldr	r2, [pc, #104]	; (8003d3c <TIM_OC3_SetConfig+0x104>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d007      	beq.n	8003ce6 <TIM_OC3_SetConfig+0xae>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a19      	ldr	r2, [pc, #100]	; (8003d40 <TIM_OC3_SetConfig+0x108>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d003      	beq.n	8003ce6 <TIM_OC3_SetConfig+0xae>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a18      	ldr	r2, [pc, #96]	; (8003d44 <TIM_OC3_SetConfig+0x10c>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d113      	bne.n	8003d0e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	011b      	lsls	r3, r3, #4
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	011b      	lsls	r3, r3, #4
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	621a      	str	r2, [r3, #32]
}
 8003d28:	bf00      	nop
 8003d2a:	371c      	adds	r7, #28
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr
 8003d34:	40012c00 	.word	0x40012c00
 8003d38:	40013400 	.word	0x40013400
 8003d3c:	40014000 	.word	0x40014000
 8003d40:	40014400 	.word	0x40014400
 8003d44:	40014800 	.word	0x40014800

08003d48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b087      	sub	sp, #28
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	021b      	lsls	r3, r3, #8
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	031b      	lsls	r3, r3, #12
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a18      	ldr	r2, [pc, #96]	; (8003e08 <TIM_OC4_SetConfig+0xc0>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d00f      	beq.n	8003dcc <TIM_OC4_SetConfig+0x84>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a17      	ldr	r2, [pc, #92]	; (8003e0c <TIM_OC4_SetConfig+0xc4>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d00b      	beq.n	8003dcc <TIM_OC4_SetConfig+0x84>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a16      	ldr	r2, [pc, #88]	; (8003e10 <TIM_OC4_SetConfig+0xc8>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d007      	beq.n	8003dcc <TIM_OC4_SetConfig+0x84>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a15      	ldr	r2, [pc, #84]	; (8003e14 <TIM_OC4_SetConfig+0xcc>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d003      	beq.n	8003dcc <TIM_OC4_SetConfig+0x84>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a14      	ldr	r2, [pc, #80]	; (8003e18 <TIM_OC4_SetConfig+0xd0>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d109      	bne.n	8003de0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	019b      	lsls	r3, r3, #6
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	621a      	str	r2, [r3, #32]
}
 8003dfa:	bf00      	nop
 8003dfc:	371c      	adds	r7, #28
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	40012c00 	.word	0x40012c00
 8003e0c:	40013400 	.word	0x40013400
 8003e10:	40014000 	.word	0x40014000
 8003e14:	40014400 	.word	0x40014400
 8003e18:	40014800 	.word	0x40014800

08003e1c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b087      	sub	sp, #28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003e60:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	041b      	lsls	r3, r3, #16
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a17      	ldr	r2, [pc, #92]	; (8003ed0 <TIM_OC5_SetConfig+0xb4>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d00f      	beq.n	8003e96 <TIM_OC5_SetConfig+0x7a>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a16      	ldr	r2, [pc, #88]	; (8003ed4 <TIM_OC5_SetConfig+0xb8>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d00b      	beq.n	8003e96 <TIM_OC5_SetConfig+0x7a>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a15      	ldr	r2, [pc, #84]	; (8003ed8 <TIM_OC5_SetConfig+0xbc>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d007      	beq.n	8003e96 <TIM_OC5_SetConfig+0x7a>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a14      	ldr	r2, [pc, #80]	; (8003edc <TIM_OC5_SetConfig+0xc0>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d003      	beq.n	8003e96 <TIM_OC5_SetConfig+0x7a>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a13      	ldr	r2, [pc, #76]	; (8003ee0 <TIM_OC5_SetConfig+0xc4>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d109      	bne.n	8003eaa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e9c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	021b      	lsls	r3, r3, #8
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	621a      	str	r2, [r3, #32]
}
 8003ec4:	bf00      	nop
 8003ec6:	371c      	adds	r7, #28
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr
 8003ed0:	40012c00 	.word	0x40012c00
 8003ed4:	40013400 	.word	0x40013400
 8003ed8:	40014000 	.word	0x40014000
 8003edc:	40014400 	.word	0x40014400
 8003ee0:	40014800 	.word	0x40014800

08003ee4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b087      	sub	sp, #28
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
 8003ef2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	021b      	lsls	r3, r3, #8
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	051b      	lsls	r3, r3, #20
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a18      	ldr	r2, [pc, #96]	; (8003f9c <TIM_OC6_SetConfig+0xb8>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d00f      	beq.n	8003f60 <TIM_OC6_SetConfig+0x7c>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a17      	ldr	r2, [pc, #92]	; (8003fa0 <TIM_OC6_SetConfig+0xbc>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d00b      	beq.n	8003f60 <TIM_OC6_SetConfig+0x7c>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a16      	ldr	r2, [pc, #88]	; (8003fa4 <TIM_OC6_SetConfig+0xc0>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d007      	beq.n	8003f60 <TIM_OC6_SetConfig+0x7c>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a15      	ldr	r2, [pc, #84]	; (8003fa8 <TIM_OC6_SetConfig+0xc4>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d003      	beq.n	8003f60 <TIM_OC6_SetConfig+0x7c>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a14      	ldr	r2, [pc, #80]	; (8003fac <TIM_OC6_SetConfig+0xc8>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d109      	bne.n	8003f74 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f66:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	029b      	lsls	r3, r3, #10
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	621a      	str	r2, [r3, #32]
}
 8003f8e:	bf00      	nop
 8003f90:	371c      	adds	r7, #28
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	40012c00 	.word	0x40012c00
 8003fa0:	40013400 	.word	0x40013400
 8003fa4:	40014000 	.word	0x40014000
 8003fa8:	40014400 	.word	0x40014400
 8003fac:	40014800 	.word	0x40014800

08003fb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b087      	sub	sp, #28
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	f023 0201 	bic.w	r2, r3, #1
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	011b      	lsls	r3, r3, #4
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f023 030a 	bic.w	r3, r3, #10
 8003fec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	621a      	str	r2, [r3, #32]
}
 8004002:	bf00      	nop
 8004004:	371c      	adds	r7, #28
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800400e:	b480      	push	{r7}
 8004010:	b087      	sub	sp, #28
 8004012:	af00      	add	r7, sp, #0
 8004014:	60f8      	str	r0, [r7, #12]
 8004016:	60b9      	str	r1, [r7, #8]
 8004018:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	f023 0210 	bic.w	r2, r3, #16
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004038:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	031b      	lsls	r3, r3, #12
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	4313      	orrs	r3, r2
 8004042:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800404a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	011b      	lsls	r3, r3, #4
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	4313      	orrs	r3, r2
 8004054:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	621a      	str	r2, [r3, #32]
}
 8004062:	bf00      	nop
 8004064:	371c      	adds	r7, #28
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800406e:	b480      	push	{r7}
 8004070:	b085      	sub	sp, #20
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
 8004076:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004084:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004086:	683a      	ldr	r2, [r7, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	4313      	orrs	r3, r2
 800408c:	f043 0307 	orr.w	r3, r3, #7
 8004090:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	609a      	str	r2, [r3, #8]
}
 8004098:	bf00      	nop
 800409a:	3714      	adds	r7, #20
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
 80040b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	021a      	lsls	r2, r3, #8
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	431a      	orrs	r2, r3
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	609a      	str	r2, [r3, #8]
}
 80040d8:	bf00      	nop
 80040da:	371c      	adds	r7, #28
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b087      	sub	sp, #28
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	f003 031f 	and.w	r3, r3, #31
 80040f6:	2201      	movs	r2, #1
 80040f8:	fa02 f303 	lsl.w	r3, r2, r3
 80040fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6a1a      	ldr	r2, [r3, #32]
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	43db      	mvns	r3, r3
 8004106:	401a      	ands	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6a1a      	ldr	r2, [r3, #32]
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	f003 031f 	and.w	r3, r3, #31
 8004116:	6879      	ldr	r1, [r7, #4]
 8004118:	fa01 f303 	lsl.w	r3, r1, r3
 800411c:	431a      	orrs	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	621a      	str	r2, [r3, #32]
}
 8004122:	bf00      	nop
 8004124:	371c      	adds	r7, #28
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
	...

08004130 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004140:	2b01      	cmp	r3, #1
 8004142:	d101      	bne.n	8004148 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004144:	2302      	movs	r3, #2
 8004146:	e063      	b.n	8004210 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2202      	movs	r2, #2
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a2b      	ldr	r2, [pc, #172]	; (800421c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d004      	beq.n	800417c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a2a      	ldr	r2, [pc, #168]	; (8004220 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d108      	bne.n	800418e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004182:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	4313      	orrs	r3, r2
 800418c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004194:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	4313      	orrs	r3, r2
 800419e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a1b      	ldr	r2, [pc, #108]	; (800421c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d018      	beq.n	80041e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ba:	d013      	beq.n	80041e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a18      	ldr	r2, [pc, #96]	; (8004224 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d00e      	beq.n	80041e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a17      	ldr	r2, [pc, #92]	; (8004228 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d009      	beq.n	80041e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a12      	ldr	r2, [pc, #72]	; (8004220 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d004      	beq.n	80041e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a13      	ldr	r2, [pc, #76]	; (800422c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d10c      	bne.n	80041fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	68ba      	ldr	r2, [r7, #8]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3714      	adds	r7, #20
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	40012c00 	.word	0x40012c00
 8004220:	40013400 	.word	0x40013400
 8004224:	40000400 	.word	0x40000400
 8004228:	40000800 	.word	0x40000800
 800422c:	40014000 	.word	0x40014000

08004230 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004238:	bf00      	nop
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004274:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004278:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004280:	b29a      	uxth	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	b29b      	uxth	r3, r3
 8004286:	43db      	mvns	r3, r3
 8004288:	b29b      	uxth	r3, r3
 800428a:	4013      	ands	r3, r2
 800428c:	b29a      	uxth	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3714      	adds	r7, #20
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80042a2:	b084      	sub	sp, #16
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	f107 0014 	add.w	r0, r7, #20
 80042b0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	b004      	add	sp, #16
 80042e2:	4770      	bx	lr

080042e4 <__libc_init_array>:
 80042e4:	b570      	push	{r4, r5, r6, lr}
 80042e6:	4d0d      	ldr	r5, [pc, #52]	; (800431c <__libc_init_array+0x38>)
 80042e8:	4c0d      	ldr	r4, [pc, #52]	; (8004320 <__libc_init_array+0x3c>)
 80042ea:	1b64      	subs	r4, r4, r5
 80042ec:	10a4      	asrs	r4, r4, #2
 80042ee:	2600      	movs	r6, #0
 80042f0:	42a6      	cmp	r6, r4
 80042f2:	d109      	bne.n	8004308 <__libc_init_array+0x24>
 80042f4:	4d0b      	ldr	r5, [pc, #44]	; (8004324 <__libc_init_array+0x40>)
 80042f6:	4c0c      	ldr	r4, [pc, #48]	; (8004328 <__libc_init_array+0x44>)
 80042f8:	f000 f820 	bl	800433c <_init>
 80042fc:	1b64      	subs	r4, r4, r5
 80042fe:	10a4      	asrs	r4, r4, #2
 8004300:	2600      	movs	r6, #0
 8004302:	42a6      	cmp	r6, r4
 8004304:	d105      	bne.n	8004312 <__libc_init_array+0x2e>
 8004306:	bd70      	pop	{r4, r5, r6, pc}
 8004308:	f855 3b04 	ldr.w	r3, [r5], #4
 800430c:	4798      	blx	r3
 800430e:	3601      	adds	r6, #1
 8004310:	e7ee      	b.n	80042f0 <__libc_init_array+0xc>
 8004312:	f855 3b04 	ldr.w	r3, [r5], #4
 8004316:	4798      	blx	r3
 8004318:	3601      	adds	r6, #1
 800431a:	e7f2      	b.n	8004302 <__libc_init_array+0x1e>
 800431c:	08004384 	.word	0x08004384
 8004320:	08004384 	.word	0x08004384
 8004324:	08004384 	.word	0x08004384
 8004328:	08004388 	.word	0x08004388

0800432c <memset>:
 800432c:	4402      	add	r2, r0
 800432e:	4603      	mov	r3, r0
 8004330:	4293      	cmp	r3, r2
 8004332:	d100      	bne.n	8004336 <memset+0xa>
 8004334:	4770      	bx	lr
 8004336:	f803 1b01 	strb.w	r1, [r3], #1
 800433a:	e7f9      	b.n	8004330 <memset+0x4>

0800433c <_init>:
 800433c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800433e:	bf00      	nop
 8004340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004342:	bc08      	pop	{r3}
 8004344:	469e      	mov	lr, r3
 8004346:	4770      	bx	lr

08004348 <_fini>:
 8004348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800434a:	bf00      	nop
 800434c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800434e:	bc08      	pop	{r3}
 8004350:	469e      	mov	lr, r3
 8004352:	4770      	bx	lr
